{"version":3,"sources":["routes/reward.js"],"names":["Reward","props","context","intendWithdraw","gateway","post","eth_addr","currentUser","then","message","success","catch","err","console","error","redeemReward","get","res","contracts","SGN","methods","cacheSend","data","result","renderActions","type","onClick","accounts","setting","network","drizzle","state","redeemedServiceReward","cacheCall","DPoS","redeemedMiningReward","axios","create","baseURL","timeout","setState","warning","this","miningReward","serviceReward","_","isEmpty","title","actions","style","marginTop","span","value","formatCelrValue","values","React","Component","contextTypes","PropTypes","object","drizzleConnect"],"mappings":"iVASMA,E,kDACJ,WAAYC,EAAOC,GAAU,IAAD,uBAC1B,cAAMD,IAqCRE,eAAiB,WACf,EAAKC,QACFC,KAAK,4BAA6B,CACjCC,SAAU,EAAKC,cAEhBC,MAAK,WACJC,IAAQC,QACN,4DAGHC,OAAM,SAAAC,GACLC,QAAQC,MAAMF,OAjDQ,EAqD5BG,aAAe,WACb,EAAKX,QACFY,IADH,mCACmC,EAAKT,cACrCC,MAAK,SAAAS,GACJ,EAAKC,UAAUC,IAAIC,QAAQL,aAAaM,UACtC,KAAOJ,EAAIK,KAAKC,WAGnBZ,OAAM,SAAAC,GACLC,QAAQC,MAAMF,OA9DQ,EAkE5BY,cAAgB,WACd,MAAO,CACL,kBAAC,IAAD,CAAQC,KAAK,UAAUC,QAAS,EAAKvB,gBAArC,qBAGA,kBAAC,IAAD,CAAQsB,KAAK,UAAUC,QAAS,EAAKX,cAArC,mBAvEwB,IAIxBY,EAEE1B,EAFF0B,SACWC,EACT3B,EADF4B,QAAWD,QALa,OAO1B,EAAKrB,YAAcoB,EAAS,GAC5B,EAAKT,UAAYhB,EAAQ4B,QAAQZ,UACjC,EAAKa,MAAQ,GAEb,EAAKb,UAAUC,IAAIC,QAAQY,sBAAsBC,UAC/C,EAAK1B,aAEP,EAAKW,UAAUgB,KAAKd,QAAQe,qBAAqBF,UAC/C,EAAK1B,aAGP,EAAKH,QAAUgC,IAAMC,OAAO,CAC1BC,QAASV,EAAQxB,QACjBmC,QAAS,MAGX,EAAKnC,QACFY,IADH,4BAC4B,EAAKT,cAC9BC,MAAK,SAAAS,GACJ,EAAKuB,SAAL,eACKvB,EAAIK,KAAKC,YAGfZ,OAAM,SAAAC,GACLC,QAAQC,MAAMF,GACdH,IAAQgC,QACN,wEAjCoB,E,qDA6ElB,IAAD,EACeC,KAAKzC,MAAnBiC,EADD,EACCA,KAAMf,EADP,EACOA,IADP,EAEiCuB,KAAKX,MAArCY,EAFD,EAECA,aAAcC,EAFf,EAEeA,cACdT,EAAyBD,EAAzBC,qBACAH,EAA0Bb,EAA1Ba,sBAER,OAAIa,IAAEC,QAAQd,IAA0Ba,IAAEC,QAAQX,GACzC,kBAAC,IAAD,MAIP,kBAAC,IAAD,CAAMY,MAAM,SAASC,QAASN,KAAKlB,iBACjC,kBAAC,IAAD,CAAKyB,MAAO,CAAEC,UAAW,SACvB,kBAAC,IAAD,CAAKC,KAAM,IACT,kBAAC,IAAD,CACEJ,MAAM,2BACNK,MAAOC,YAAgBV,MAG3B,kBAAC,IAAD,CAAKQ,KAAM,IACT,kBAAC,IAAD,CACEJ,MAAM,4BACNK,MAAOC,YAAgBT,MAG3B,kBAAC,IAAD,CAAKO,KAAM,IACT,kBAAC,IAAD,CACEJ,MAAM,yBACNK,MAAOC,YAAgBR,IAAES,OAAOnB,GAAsB,GAAGiB,UAG7D,kBAAC,IAAD,CAAKD,KAAM,IACT,kBAAC,IAAD,CACEJ,MAAM,0BACNK,MAAOC,YAAgBR,IAAES,OAAOtB,GAAuB,GAAGoB,gB,GAhHnDG,IAAMC,WA6H3BxD,EAAOyD,aAAe,CACpB3B,QAAS4B,IAAUC,QAcNC,mCAAe5D,GAX9B,SAAyB+B,GAAQ,IACvBF,EAA4CE,EAA5CF,QAASF,EAAmCI,EAAnCJ,SAAUT,EAAyBa,EAAzBb,UAAWgB,EAAcH,EAAdG,KAAMf,EAAQY,EAARZ,IAE5C,MAAO,CACLU,UACAF,WACAO,KAAK,2BAAMA,GAAShB,EAAUgB,MAC9Bf,IAAI,2BAAMA,GAAQD,EAAUC","file":"static/js/10.5aaaad35.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport { Skeleton, Card, Statistic, Row, Col, Button, message } from 'antd';\nimport axios from 'axios';\n\nimport { formatCelrValue } from '../utils/unit';\n\nclass Reward extends React.Component {\n  constructor(props, context) {\n    super(props);\n\n    const {\n      accounts,\n      network: { setting }\n    } = props;\n    this.currentUser = accounts[0];\n    this.contracts = context.drizzle.contracts;\n    this.state = {};\n\n    this.contracts.SGN.methods.redeemedServiceReward.cacheCall(\n      this.currentUser\n    );\n    this.contracts.DPoS.methods.redeemedMiningReward.cacheCall(\n      this.currentUser\n    );\n\n    this.gateway = axios.create({\n      baseURL: setting.gateway,\n      timeout: 1000\n    });\n\n    this.gateway\n      .get(`/validator/reward/${this.currentUser}`)\n      .then(res => {\n        this.setState({\n          ...res.data.result\n        });\n      })\n      .catch(err => {\n        console.error(err);\n        message.warning(\n          'Please config gateway url in setting to load sgn reward correctly'\n        );\n      });\n  }\n\n  intendWithdraw = () => {\n    this.gateway\n      .post('/validator/withdrawReward', {\n        eth_addr: this.currentUser\n      })\n      .then(() => {\n        message.success(\n          'Success! Please wait a few seconds to trigger redeem.'\n        );\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  };\n\n  redeemReward = () => {\n    this.gateway\n      .get(`/validator/rewardRequest/${this.currentUser}`)\n      .then(res => {\n        this.contracts.SGN.methods.redeemReward.cacheSend(\n          '0x' + res.data.result\n        );\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  };\n\n  renderActions = () => {\n    return [\n      <Button type=\"primary\" onClick={this.intendWithdraw}>\n        Initialize Redeem\n      </Button>,\n      <Button type=\"primary\" onClick={this.redeemReward}>\n        Redeem Reward\n      </Button>\n    ];\n  };\n\n  render() {\n    const { DPoS, SGN } = this.props;\n    const { miningReward, serviceReward } = this.state;\n    const { redeemedMiningReward } = DPoS;\n    const { redeemedServiceReward } = SGN;\n\n    if (_.isEmpty(redeemedServiceReward) || _.isEmpty(redeemedMiningReward)) {\n      return <Skeleton />;\n    }\n\n    return (\n      <Card title=\"Reward\" actions={this.renderActions()}>\n        <Row style={{ marginTop: '10px' }}>\n          <Col span={12}>\n            <Statistic\n              title=\"Cumulative Mining Reward\"\n              value={formatCelrValue(miningReward)}\n            />\n          </Col>\n          <Col span={12}>\n            <Statistic\n              title=\"Cumulative Service Reward\"\n              value={formatCelrValue(serviceReward)}\n            />\n          </Col>\n          <Col span={12}>\n            <Statistic\n              title=\"Redeemed Mining Reward\"\n              value={formatCelrValue(_.values(redeemedMiningReward)[0].value)}\n            />\n          </Col>\n          <Col span={12}>\n            <Statistic\n              title=\"Redeemed Service Reward\"\n              value={formatCelrValue(_.values(redeemedServiceReward)[0].value)}\n            />\n          </Col>\n        </Row>\n      </Card>\n    );\n  }\n}\n\nReward.propTypes = {\n  dispatch: PropTypes.func.isRequired\n};\n\nReward.contextTypes = {\n  drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n  const { network, accounts, contracts, DPoS, SGN } = state;\n\n  return {\n    network,\n    accounts,\n    DPoS: { ...DPoS, ...contracts.DPoS },\n    SGN: { ...SGN, ...contracts.SGN }\n  };\n}\n\nexport default drizzleConnect(Reward, mapStateToProps);\n"],"sourceRoot":""}