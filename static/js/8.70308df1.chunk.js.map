{"version":3,"sources":["routes/reward.js"],"names":["GATEWAY_KEY","Reward","props","context","_this","Object","_Users_zhuxuefeng_mygit_celer_sgn_contract_web_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_Users_zhuxuefeng_mygit_celer_sgn_contract_web_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_zhuxuefeng_mygit_celer_sgn_contract_web_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","setGateway","value","localStorage","setItem","gateway","axios","create","baseURL","timeout","get","concat","currentUser","then","res","setState","_Users_zhuxuefeng_mygit_celer_sgn_contract_web_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","data","result","indendWithdraw","post","ethAddr","message","success","redeemReward","contracts","Guard","methods","cacheSend","renderGateway","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","antd__WEBPACK_IMPORTED_MODULE_11__","Search","defaultValue","defaults","placeholder","enterButton","onSearch","style","width","renderActions","antd__WEBPACK_IMPORTED_MODULE_12__","type","onClick","accounts","drizzle","state","redeemedServiceReward","cacheCall","redeemedMiningReward","getItem","_this$state","miningReward","serviceReward","_","isEmpty","antd__WEBPACK_IMPORTED_MODULE_13__","antd__WEBPACK_IMPORTED_MODULE_14__","title","actions","extra","antd__WEBPACK_IMPORTED_MODULE_15__","marginTop","antd__WEBPACK_IMPORTED_MODULE_16__","span","antd__WEBPACK_IMPORTED_MODULE_17__","formatCelrValue","values","React","Component","contextTypes","PropTypes","object","drizzleConnect","network"],"mappings":"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","file":"static/js/8.70308df1.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport {\n  Skeleton,\n  Card,\n  Statistic,\n  Row,\n  Col,\n  Button,\n  Input,\n  message\n} from 'antd';\nimport axios from 'axios';\n\nimport { formatCelrValue } from '../utils/unit';\n\nconst GATEWAY_KEY = 'gateway';\n\nclass Reward extends React.Component {\n  constructor(props, context) {\n    super(props);\n\n    const { accounts } = props;\n    this.currentUser = accounts[0];\n    this.contracts = context.drizzle.contracts;\n    this.state = {};\n\n    this.contracts.Guard.methods.redeemedServiceReward.cacheCall(\n      this.currentUser\n    );\n    this.contracts.Guard.methods.redeemedMiningReward.cacheCall(\n      this.currentUser\n    );\n\n    this.setGateway(localStorage.getItem(GATEWAY_KEY));\n  }\n\n  setGateway = value => {\n    localStorage.setItem(GATEWAY_KEY, value);\n    this.gateway = axios.create({\n      baseURL: value,\n      timeout: 1000\n    });\n\n    this.gateway.get(`/validator/reward/${this.currentUser}`).then(res => {\n      this.setState({\n        ...res.data.result\n      });\n    });\n  };\n\n  indendWithdraw = () => {\n    this.gateway\n      .post('/validator/withdrawReward', {\n        ethAddr: this.currentUser\n      })\n      .then(() => {\n        message.success(\n          'Success! Please wait a few seconds to trigger redeem.'\n        );\n      });\n  };\n\n  redeemReward = () => {\n    this.gateway\n      .get(`/validator/rewardRequest/${this.currentUser}`)\n      .then(res => {\n        this.contracts.Guard.methods.redeemReward.cacheSend(\n          '0x' + res.data.result\n        );\n      });\n  };\n\n  renderGateway = () => {\n    return (\n      <Input.Search\n        defaultValue={this.gateway.defaults.baseURL}\n        placeholder=\"Gateway url\"\n        enterButton=\"Save\"\n        onSearch={this.setGateway}\n        style={{ width: 500 }}\n      />\n    );\n  };\n\n  renderActions = () => {\n    return [\n      <Button type=\"primary\" onClick={this.indendWithdraw}>\n        Initialize Redeem\n      </Button>,\n      <Button type=\"primary\" onClick={this.redeemReward}>\n        Redeem Reward\n      </Button>\n    ];\n  };\n\n  render() {\n    const { Guard } = this.props;\n    const { miningReward, serviceReward } = this.state;\n    const { redeemedServiceReward, redeemedMiningReward } = Guard;\n\n    if (_.isEmpty(redeemedServiceReward) || _.isEmpty(redeemedMiningReward)) {\n      return <Skeleton />;\n    }\n\n    return (\n      <Card\n        title=\"Reward\"\n        actions={this.renderActions()}\n        extra={this.renderGateway()}\n      >\n        <Row style={{ marginTop: '10px' }}>\n          <Col span={12}>\n            <Statistic\n              title=\"Cumulative Mining Reward\"\n              value={formatCelrValue(miningReward)}\n            />\n          </Col>\n          <Col span={12}>\n            <Statistic\n              title=\"Cumulative Service Reward\"\n              value={formatCelrValue(serviceReward)}\n            />\n          </Col>\n          <Col span={12}>\n            <Statistic\n              title=\"Redeemed Mining Reward\"\n              value={formatCelrValue(_.values(redeemedMiningReward)[0].value)}\n            />\n          </Col>\n          <Col span={12}>\n            <Statistic\n              title=\"Redeemed Service Reward\"\n              value={formatCelrValue(_.values(redeemedServiceReward)[0].value)}\n            />\n          </Col>\n        </Row>\n      </Card>\n    );\n  }\n}\n\nReward.propTypes = {\n  dispatch: PropTypes.func.isRequired\n};\n\nReward.contextTypes = {\n  drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n  const { network, accounts, contracts, Guard } = state;\n\n  return {\n    network,\n    accounts,\n    Guard: { ...Guard, ...contracts.Guard }\n  };\n}\n\nexport default drizzleConnect(Reward, mapStateToProps);\n"],"sourceRoot":""}