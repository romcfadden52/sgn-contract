{"version":3,"sources":["utils/dpos.js","components/candidate/delegate-form.js","components/candidate/withdraw-form.js","components/candidate/commission-form.js","components/candidate/delegator-table.js","components/candidate/sidechain-info.js","components/candidate/punish-table.js","routes/candidate.js"],"names":["CANDIDATE_STATUS","PARAM_NAMES","PROPOSAL_STATUS","Voting","Closed","VOTE_TYPE","Yes","No","Abstain","DelegateForm","props","context","onSubmit","onClose","candidateId","form","current","validateFields","err","values","value","contracts","DPoS","methods","delegate","cacheSend","web3","utils","toWei","toString","React","createRef","drizzle","this","visible","formItems","name","field","fieldOptions","celrFieldOptions","placeholder","rules","message","required","title","onOk","onCancel","ref","items","Component","contextTypes","PropTypes","object","WithdrawForm","candidate","candidateAddr","args","status","withdrawFromUnbondedCandidate","intendWithdraw","CommissionForm","handleIncreaseCommission","network","console","log","commissionRate","rateLockEndTime","RATE_BASE","_","toNumber","block","number","announceIncreaseCommissionRate","nonIncreaseCommissionRate","state","commissionRateField","rateLockEndTimeField","drizzleConnect","columns","dataIndex","nestedColumns","DelegatorTable","expandedRowRender","record","dataSource","zip","intentAmounts","intentProposedTimes","map","intentAmount","intentProposedTime","formatCelrValue","pagination","delegators","filter","delegator","sort","delegator0","delegator1","delegatedStake","undelegatingStake","render","text","SidechainInfo","setting","axios","get","gateway","then","res","setState","data","result","catch","error","warning","stakingPool","span","PunishTable","punishes","punish0","punish1","validator","punish","amount","Candidate","toggleDelegateModal","prevState","isDelegateModalVisible","toggleWithdrawModal","isWithdrawModalVisible","toggleCommissionModal","isCommissionModalVisible","confirmWithdraw","confirmIncreaseCommissionRate","claimValidator","renderAction","accounts","isOwner","menu","Item","onClick","overlay","className","type","renderCandidateDetail","SGN","minSelfStake","sidechainHexAddr","chain","sidechainAddrMap","find","sidechainAddr","bech32","encode","toWords","hexToBytes","style","marginTop","TabPane","tab","key","match","params","id","cacheCall","events","Delegate","fromBlock","event","returnValues","getDelegatorInfo","Punish","extra","candidates","getCandidateInfo"],"mappings":"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","file":"static/js/7.dd7908dd.chunk.js","sourcesContent":["export const CANDIDATE_STATUS = ['Unbonded', 'Bonded', 'Unbonding'];\n\nexport const PARAM_NAMES = [\n    'ProposalDeposit',\n    'GovernVoteTimeout',\n    'BlameTimeout',\n    'MinValidatorNum',\n    'MaxValidatorNum',\n    'MinStakeInPool',\n    'IncreaseRateWaitTime'\n];\n\nexport const PROPOSAL_STATUS = { Voting: '1', Closed: '2' };\n\nexport const VOTE_TYPE = {\n    Yes: 1,\n    No: 2,\n    Abstain: 3\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport web3 from 'web3';\nimport { Modal } from 'antd';\n\nimport Form from '../form';\nimport { celrFieldOptions } from '../../utils/form';\n\nclass DelegateForm extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.form = React.createRef();\n        this.contracts = context.drizzle.contracts;\n    }\n\n    onSubmit = () => {\n        const { onClose, candidateId } = this.props;\n\n        this.form.current.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n\n            const { value } = values;\n\n            this.contracts.DPoS.methods.delegate.cacheSend(\n                candidateId,\n                web3.utils.toWei(value.toString(), 'ether')\n            );\n\n            onClose();\n        });\n    };\n\n    render() {\n        const { visible, onClose } = this.props;\n        const formItems = [\n            {\n                name: 'value',\n                field: 'number',\n                fieldOptions: {\n                    ...celrFieldOptions,\n                    placeholder: 'The amount of CELR to delegate'\n                },\n                rules: [\n                    {\n                        message: 'Please enter a value!',\n                        required: true\n                    }\n                ]\n            }\n        ];\n\n        return (\n            <Modal\n                title=\"Delegate Stake\"\n                visible={visible}\n                onOk={this.onSubmit}\n                onCancel={onClose}\n            >\n                <Form ref={this.form} items={formItems} />\n            </Modal>\n        );\n    }\n}\n\nDelegateForm.propTypes = {\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nDelegateForm.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nexport default DelegateForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport web3 from 'web3';\nimport { Modal } from 'antd';\n\nimport Form from '../form';\nimport { celrFieldOptions } from '../../utils/form';\n\nclass WithdrawForm extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.form = React.createRef();\n        this.contracts = context.drizzle.contracts;\n    }\n\n    onSubmit = () => {\n        const { onClose, candidate } = this.props;\n        const candidateAddr = candidate.args[0];\n\n        this.form.current.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n\n            const { value } = values;\n\n            if (candidate.value.status === 0) {\n                this.contracts.DPoS.methods.withdrawFromUnbondedCandidate.cacheSend(\n                    candidateAddr,\n                    web3.utils.toWei(value.toString(), 'ether')\n                );\n            } else {\n                this.contracts.DPoS.methods.intendWithdraw.cacheSend(\n                    candidateAddr,\n                    web3.utils.toWei(value.toString(), 'ether')\n                );\n            }\n\n            onClose();\n        });\n    };\n\n    render() {\n        const { visible, onClose } = this.props;\n        const formItems = [\n            {\n                name: 'value',\n                field: 'number',\n                fieldOptions: {\n                    ...celrFieldOptions,\n                    placeholder: 'The amount of CELR to withdraw'\n                },\n                rules: [\n                    {\n                        message: 'Please enter a value!',\n                        required: true\n                    }\n                ]\n            }\n        ];\n\n        return (\n            <Modal\n                title=\"Withdraw Stake\"\n                visible={visible}\n                onOk={this.onSubmit}\n                onCancel={onClose}\n            >\n                <Form ref={this.form} items={formItems} />\n            </Modal>\n        );\n    }\n}\n\nWithdrawForm.propTypes = {\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nWithdrawForm.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nexport default WithdrawForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { Modal } from 'antd';\nimport { drizzleConnect } from 'drizzle-react';\n\nimport Form from '../form';\nimport { commissionRateField, rateLockEndTimeField } from '../../utils/form';\nimport { RATE_BASE } from '../../utils/constant';\n\nclass CommissionForm extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.state = {};\n        this.form = React.createRef();\n        this.contracts = context.drizzle.contracts;\n    }\n\n    handleIncreaseCommission = () => {\n        const { onClose, network, candidate } = this.props;\n\n        this.form.current.validateFields((err, values) => {\n            if (err) {\n                console.log(err);\n                return;\n            }\n\n            let { commissionRate, rateLockEndTime } = values;\n            commissionRate = commissionRate * RATE_BASE;\n            rateLockEndTime =\n                _.toNumber(rateLockEndTime) + network.block.number;\n\n            if (commissionRate > candidate.value.commissionRate) {\n                this.contracts.DPoS.methods.announceIncreaseCommissionRate.cacheSend(\n                    commissionRate,\n                    rateLockEndTime\n                );\n            } else {\n                this.contracts.DPoS.methods.nonIncreaseCommissionRate.cacheSend(\n                    commissionRate,\n                    rateLockEndTime\n                );\n            }\n            onClose();\n        });\n    };\n\n    render() {\n        const { visible, onClose } = this.props;\n\n        const formItems = [commissionRateField, rateLockEndTimeField];\n\n        return (\n            <Modal\n                title=\"Increase Commission Rate\"\n                visible={visible}\n                onOk={this.handleIncreaseCommission}\n                onCancel={onClose}\n            >\n                <Form ref={this.form} items={formItems} />\n            </Modal>\n        );\n    }\n}\n\nCommissionForm.propTypes = {\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nCommissionForm.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    const { network } = state;\n\n    return {\n        network\n    };\n}\n\nexport default drizzleConnect(CommissionForm, mapStateToProps);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport { Table } from 'antd';\n\nimport { formatCelrValue } from '../../utils/unit';\n\nconst columns = [\n    {\n        title: 'Delegator',\n        dataIndex: 'delegator'\n    },\n    {\n        title: 'Delegated Stake',\n        dataIndex: 'delegatedStake'\n    },\n    {\n        title: 'Undelegating Stake',\n        dataIndex: 'undelegatingStake'\n    }\n];\n\nconst nestedColumns = [\n    {\n        title: 'Intent Withdraw Amount',\n        dataIndex: 'intentAmount'\n    },\n    {\n        title: 'Intent Withdraw Block Height',\n        dataIndex: 'intentProposedTime'\n    }\n];\n\nclass DelegatorTable extends React.Component {\n    expandedRowRender = record => {\n        const dataSource = _.zip(\n            record.intentAmounts,\n            record.intentProposedTimes\n        ).map(([intentAmount, intentProposedTime]) => ({\n            intentAmount: formatCelrValue(intentAmount),\n            intentProposedTime\n        }));\n\n        return (\n            <Table\n                columns={nestedColumns}\n                dataSource={dataSource}\n                pagination={false}\n            />\n        );\n    };\n\n    render() {\n        const { delegators } = this.props;\n        const dataSource = delegators\n            .filter(delegator => delegator.value)\n            .sort((delegator0, delegator1) => {\n                return delegator0.args[1] > delegator1.args[1];\n            })\n            .map(delegator => ({\n                ...delegator.value,\n                delegator: delegator.args[1],\n                delegatedStake: formatCelrValue(delegator.value.delegatedStake),\n                undelegatingStake: formatCelrValue(\n                    delegator.value.undelegatingStake\n                )\n            }));\n\n        return (\n            <Table\n                dataSource={dataSource}\n                columns={columns}\n                pagination={false}\n                expandedRowRender={this.expandedRowRender}\n            />\n        );\n    }\n}\n\nDelegatorTable.propTypes = {\n    delegators: PropTypes.array.isRequired\n};\n\nfunction mapStateToProps(state) {}\n\nexport default drizzleConnect(DelegatorTable, mapStateToProps);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { drizzleConnect } from 'drizzle-react';\nimport { Statistic, Row, Col, message, Table } from 'antd';\nimport axios from 'axios';\n\nimport { formatCelrValue } from '../../utils/unit';\n\nconst columns = [\n    {\n        title: 'Delegator',\n        dataIndex: 'delegatorAddr'\n    },\n    {\n        title: 'Delegated Stake',\n        dataIndex: 'delegatedStake',\n        render: text => {\n            return formatCelrValue(text);\n        }\n    }\n];\n\nclass SidechainInfo extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        const {\n            candidateId,\n            network: { setting }\n        } = props;\n        this.state = {};\n\n        axios\n            .get(`${setting.gateway}/validator/candidate/${candidateId}`)\n            .then(res => {\n                this.setState({\n                    ...res.data.result\n                });\n            })\n            .catch(err => {\n                console.error(err);\n                message.warning(\n                    'Please config gateway url in setting to load sidechain info correctly'\n                );\n            });\n    }\n\n    render() {\n        const { commissionRate, stakingPool, delegators } = this.state;\n        return (\n            <Row>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Commission Rate\"\n                        value={`${commissionRate * 100} %`}\n                    />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Staking Pool\"\n                        value={formatCelrValue(stakingPool)}\n                    />\n                </Col>\n\n                <Col span={24}>\n                    <Table\n                        dataSource={delegators}\n                        columns={columns}\n                        pagination={false}\n                    />\n                </Col>\n            </Row>\n        );\n    }\n}\n\nSidechainInfo.propTypes = {};\n\nSidechainInfo.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    const { network } = state;\n\n    return {\n        network\n    };\n}\n\nexport default drizzleConnect(SidechainInfo, mapStateToProps);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { drizzleConnect } from 'drizzle-react';\nimport { Table } from 'antd';\n\nimport { formatCelrValue } from '../../utils/unit';\n\nconst columns = [\n    {\n        title: 'Delegator',\n        dataIndex: 'delegator'\n    },\n    {\n        title: 'Amount',\n        dataIndex: 'amount'\n    }\n];\n\nclass PunishTable extends React.Component {\n    render() {\n        const { punishes } = this.props;\n\n        const dataSource = punishes\n            .sort((punish0, punish1) => {\n                return punish0.validator > punish1.validator;\n            })\n            .map(punish => ({\n                ...punish,\n                amount: formatCelrValue(punish.amount)\n            }));\n\n        console.log(punishes);\n        return (\n            <Table\n                dataSource={dataSource}\n                columns={columns}\n                pagination={false}\n            />\n        );\n    }\n}\n\nPunishTable.propTypes = {\n    punishes: PropTypes.array.isRequired\n};\n\nfunction mapStateToProps(state) {}\n\nexport default drizzleConnect(PunishTable, mapStateToProps);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport bech32 from 'bech32';\nimport web3 from 'web3';\nimport {\n    Card,\n    Skeleton,\n    Statistic,\n    Row,\n    Col,\n    Menu,\n    Dropdown,\n    Icon,\n    Tabs\n} from 'antd';\n\nimport DelegateForm from '../components/candidate/delegate-form';\nimport WithdrawForm from '../components/candidate/withdraw-form';\nimport CommissionForm from '../components/candidate/commission-form';\nimport DelegatorTable from '../components/candidate/delegator-table';\nimport SidechainInfo from '../components/candidate/sidechain-info';\nimport PunishTable from '../components/candidate/punish-table';\nimport { formatCelrValue } from '../utils/unit';\nimport { CANDIDATE_STATUS } from '../utils/dpos';\nimport { RATE_BASE } from '../utils/constant';\n\nclass Candidate extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.contracts = context.drizzle.contracts;\n        this.state = {\n            candidate: null,\n            punishes: [],\n            isDelegateModalVisible: false,\n            isWithdrawModalVisible: false,\n            isCommissionModalVisible: false\n        };\n\n        const candidateId = props.match.params.id;\n        this.contracts.SGN.methods.sidechainAddrMap.cacheCall(candidateId);\n        this.contracts.DPoS.events.Delegate(\n            {\n                fromBlock: 0,\n                filter: { candidate: candidateId }\n            },\n            (err, event) => {\n                if (err) {\n                    return;\n                }\n\n                const { delegator, candidate } = event.returnValues;\n                this.contracts.DPoS.methods.getDelegatorInfo.cacheCall(\n                    candidate,\n                    delegator\n                );\n            }\n        );\n\n        this.contracts.DPoS.events.Punish(\n            {\n                fromBlock: 0,\n                filter: { validator: candidateId }\n            },\n            (err, event) => {\n                if (err) {\n                    return;\n                }\n\n                this.setState({\n                    punishes: [...this.state.punishes, event.returnValues]\n                });\n            }\n        );\n    }\n\n    static getDerivedStateFromProps(props) {\n        const { match, DPoS = {} } = props;\n        const candidateId = match.params.id;\n        const candidates = _.values(DPoS.getCandidateInfo);\n        const candidate = _.find(\n            candidates,\n            candidate => candidate.args[0] === candidateId\n        );\n        const delegators = _.values(DPoS.getDelegatorInfo).filter(\n            delegator => delegator.args[0] === candidateId\n        );\n\n        return { candidate, candidateId, delegators };\n    }\n\n    toggleDelegateModal = () => {\n        this.setState(prevState => ({\n            isDelegateModalVisible: !prevState.isDelegateModalVisible\n        }));\n    };\n\n    toggleWithdrawModal = () => {\n        this.setState(prevState => ({\n            isWithdrawModalVisible: !prevState.isWithdrawModalVisible\n        }));\n    };\n\n    toggleCommissionModal = () => {\n        this.setState(prevState => ({\n            isCommissionModalVisible: !prevState.isCommissionModalVisible\n        }));\n    };\n\n    confirmWithdraw = () => {\n        const { candidateId } = this.state;\n\n        this.contracts.DPoS.methods.confirmWithdraw.cacheSend(candidateId);\n    };\n\n    confirmIncreaseCommissionRate = () => {\n        this.contracts.DPoS.methods.confirmIncreaseCommissionRate.cacheSend();\n    };\n\n    claimValidator = () => {\n        this.contracts.DPoS.methods.claimValidator.cacheSend();\n    };\n\n    renderAction = () => {\n        const { accounts } = this.props;\n        const { candidate } = this.state;\n        const isOwner = accounts[0] === candidate.args[0];\n\n        const menu = (\n            <Menu>\n                <Menu.Item onClick={this.toggleDelegateModal}>\n                    Delegate\n                </Menu.Item>\n                <Menu.Item onClick={this.toggleWithdrawModal}>\n                    Initialize Withdraw\n                </Menu.Item>\n                <Menu.Item onClick={this.confirmWithdraw}>\n                    Confirm Withdraw\n                </Menu.Item>\n                {isOwner && (\n                    <Menu.Item onClick={this.toggleCommissionModal}>\n                        Announce Increase Commission Rate\n                    </Menu.Item>\n                )}\n                {isOwner && (\n                    <Menu.Item onClick={this.confirmIncreaseCommissionRate}>\n                        Confirm Increase Commission Rate\n                    </Menu.Item>\n                )}\n                {isOwner && (\n                    <Menu.Item onClick={this.claimValidator}>\n                        Claim Validator\n                    </Menu.Item>\n                )}\n            </Menu>\n        );\n\n        return (\n            <Dropdown overlay={menu}>\n                <a className=\"ant-dropdown-link\">\n                    Actions <Icon type=\"down\" />\n                </a>\n            </Dropdown>\n        );\n    };\n\n    renderCandidateDetail = () => {\n        const { SGN } = this.props;\n        const { candidate, delegators, punishes } = this.state;\n        const candidateId = candidate.args[0];\n        const {\n            minSelfStake,\n            stakingPool,\n            status,\n            commissionRate,\n            rateLockEndTime\n        } = candidate.value;\n        const sidechainHexAddr = _.chain(SGN.sidechainAddrMap)\n            .find(data => data.args[0] === candidateId)\n            .get('value', '')\n            .value();\n        const sidechainAddr =\n            sidechainHexAddr &&\n            bech32.encode(\n                'cosmos',\n                bech32.toWords(web3.utils.hexToBytes(sidechainHexAddr))\n            );\n\n        return (\n            <Row style={{ marginTop: '10px' }}>\n                <Col span={12}>\n                    <Statistic title=\"Address\" value={candidateId} />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Status\"\n                        value={CANDIDATE_STATUS[status]}\n                    />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Min Self Stake\"\n                        value={formatCelrValue(minSelfStake)}\n                    />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Staking Pool\"\n                        value={formatCelrValue(stakingPool)}\n                    />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Commission Rate\"\n                        value={`${commissionRate / RATE_BASE} %`}\n                    />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Rate Lock End Time\"\n                        value={`${rateLockEndTime} block height`}\n                    />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Sidechain Address\"\n                        value={sidechainAddr}\n                    />\n                </Col>\n                <Col span={24}>\n                    <Tabs>\n                        <Tabs.TabPane tab=\"Delegators\" key=\"delegators\">\n                            <DelegatorTable delegators={delegators} />\n                        </Tabs.TabPane>\n                        <Tabs.TabPane tab=\"Sidechain\" key=\"sidechain\">\n                            <SidechainInfo candidateId={candidateId} />\n                        </Tabs.TabPane>\n                        <Tabs.TabPane tab=\"Punishes\" key=\"punishes\">\n                            <PunishTable punishes={punishes} />\n                        </Tabs.TabPane>\n                    </Tabs>\n                </Col>\n            </Row>\n        );\n    };\n\n    render() {\n        const {\n            candidate,\n            candidateId,\n            isDelegateModalVisible,\n            isWithdrawModalVisible,\n            isCommissionModalVisible\n        } = this.state;\n\n        if (!candidate) {\n            return <Skeleton />;\n        }\n\n        return (\n            <Card title=\"Candidate\" extra={this.renderAction()}>\n                {this.renderCandidateDetail()}\n                <DelegateForm\n                    candidateId={candidateId}\n                    visible={isDelegateModalVisible}\n                    onClose={this.toggleDelegateModal}\n                />\n                <WithdrawForm\n                    candidate={candidate}\n                    visible={isWithdrawModalVisible}\n                    onClose={this.toggleWithdrawModal}\n                />\n                <CommissionForm\n                    candidate={candidate}\n                    visible={isCommissionModalVisible}\n                    onClose={this.toggleCommissionModal}\n                />\n            </Card>\n        );\n    }\n}\n\nCandidate.propTypes = {\n    dispatch: PropTypes.func.isRequired\n};\n\nCandidate.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    const { accounts, contracts, DPoS, SGN } = state;\n    return {\n        accounts,\n        DPoS: { ...DPoS, ...contracts.DPoS },\n        SGN: { ...SGN, ...contracts.SGN }\n    };\n}\n\nexport default drizzleConnect(Candidate, mapStateToProps);\n"],"sourceRoot":""}