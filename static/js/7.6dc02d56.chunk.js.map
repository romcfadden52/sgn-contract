{"version":3,"sources":["utils/dpos.js","components/candidate/delegate-form.js","components/candidate/withdraw-form.js","components/candidate/commission-form.js","components/candidate/delegator-table.js","components/candidate/sidechain-info.js","components/candidate/slash-table.js","routes/candidate.js"],"names":["CANDIDATE_STATUS","PARAM_NAMES","PROPOSAL_STATUS","Voting","Closed","VOTE_TYPE","Yes","No","Abstain","DelegateForm","props","context","onSubmit","onClose","candidateId","form","current","validateFields","err","values","value","contracts","DPoS","methods","delegate","cacheSend","web3","utils","toWei","toString","React","createRef","drizzle","this","visible","formItems","name","field","fieldOptions","celrFieldOptions","placeholder","rules","message","required","title","onOk","onCancel","ref","items","Component","contextTypes","PropTypes","object","WithdrawForm","candidate","candidateAddr","args","status","withdrawFromUnbondedCandidate","intendWithdraw","CommissionForm","handleIncreaseCommission","network","console","log","commissionRate","rateLockEndTime","RATE_BASE","_","toNumber","block","number","announceIncreaseCommissionRate","nonIncreaseCommissionRate","state","commissionRateField","rateLockEndTimeField","drizzleConnect","columns","dataIndex","sorter","a","b","toBN","delegatedStake","cmp","render","text","formatCelrValue","nestedColumns","DelegatorTable","expandedRowRender","record","dataSource","zip","intentAmounts","intentProposedTimes","map","intentAmount","intentProposedTime","pagination","delegators","filter","delegator","sort","delegator0","delegator1","SidechainInfo","setting","axios","get","gateway","then","res","setState","data","result","catch","error","warning","commission_rate","stakingPool","staking_pool","description","span","website","security_contact","SlashTable","slashes","slash0","slash1","validator","slash","amount","Candidate","toggleDelegateModal","prevState","isDelegateModalVisible","toggleWithdrawModal","isWithdrawModalVisible","toggleCommissionModal","isCommissionModalVisible","confirmWithdraw","confirmIncreaseCommissionRate","claimValidator","renderAction","accounts","isOwner","menu","Item","onClick","overlay","className","type","renderCandidateDetail","SGN","minSelfStake","sidechainHexAddr","chain","sidechainAddrMap","find","sidechainAddr","bech32","encode","toWords","hexToBytes","style","marginTop","TabPane","tab","key","match","params","id","cacheCall","events","Delegate","fromBlock","event","returnValues","getDelegatorInfo","Slash","extra","candidates","getCandidateInfo"],"mappings":"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","file":"static/js/7.6dc02d56.chunk.js","sourcesContent":["export const CANDIDATE_STATUS = ['Unbonded', 'Bonded', 'Unbonding'];\n\nexport const PARAM_NAMES = [\n    'ProposalDeposit',\n    'GovernVoteTimeout',\n    'SlashTimeout',\n    'MinValidatorNum',\n    'MaxValidatorNum',\n    'MinStakeInPool',\n    'AdvanceNoticePeriod'\n];\n\nexport const PROPOSAL_STATUS = { Voting: '1', Closed: '2' };\n\nexport const VOTE_TYPE = {\n    Yes: 1,\n    No: 2,\n    Abstain: 3\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport web3 from 'web3';\nimport { Modal } from 'antd';\n\nimport Form from '../form';\nimport { celrFieldOptions } from '../../utils/form';\n\nclass DelegateForm extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.form = React.createRef();\n        this.contracts = context.drizzle.contracts;\n    }\n\n    onSubmit = () => {\n        const { onClose, candidateId } = this.props;\n\n        this.form.current.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n\n            const { value } = values;\n\n            this.contracts.DPoS.methods.delegate.cacheSend(\n                candidateId,\n                web3.utils.toWei(value.toString(), 'ether')\n            );\n\n            onClose();\n        });\n    };\n\n    render() {\n        const { visible, onClose } = this.props;\n        const formItems = [\n            {\n                name: 'value',\n                field: 'number',\n                fieldOptions: {\n                    ...celrFieldOptions,\n                    placeholder: 'The amount of CELR to delegate'\n                },\n                rules: [\n                    {\n                        message: 'Please enter a value!',\n                        required: true\n                    }\n                ]\n            }\n        ];\n\n        return (\n            <Modal\n                title=\"Delegate Stake\"\n                visible={visible}\n                onOk={this.onSubmit}\n                onCancel={onClose}\n            >\n                <Form ref={this.form} items={formItems} />\n            </Modal>\n        );\n    }\n}\n\nDelegateForm.propTypes = {\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nDelegateForm.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nexport default DelegateForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport web3 from 'web3';\nimport { Modal } from 'antd';\n\nimport Form from '../form';\nimport { celrFieldOptions } from '../../utils/form';\n\nclass WithdrawForm extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.form = React.createRef();\n        this.contracts = context.drizzle.contracts;\n    }\n\n    onSubmit = () => {\n        const { onClose, candidate } = this.props;\n        const candidateAddr = candidate.args[0];\n\n        this.form.current.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n\n            const { value } = values;\n\n            if (candidate.value.status === '0') {\n                this.contracts.DPoS.methods.withdrawFromUnbondedCandidate.cacheSend(\n                    candidateAddr,\n                    web3.utils.toWei(value.toString(), 'ether')\n                );\n            } else {\n                this.contracts.DPoS.methods.intendWithdraw.cacheSend(\n                    candidateAddr,\n                    web3.utils.toWei(value.toString(), 'ether')\n                );\n            }\n\n            onClose();\n        });\n    };\n\n    render() {\n        const { visible, onClose } = this.props;\n        const formItems = [\n            {\n                name: 'value',\n                field: 'number',\n                fieldOptions: {\n                    ...celrFieldOptions,\n                    placeholder: 'The amount of CELR to withdraw'\n                },\n                rules: [\n                    {\n                        message: 'Please enter a value!',\n                        required: true\n                    }\n                ]\n            }\n        ];\n\n        return (\n            <Modal\n                title=\"Withdraw Stake\"\n                visible={visible}\n                onOk={this.onSubmit}\n                onCancel={onClose}\n            >\n                <Form ref={this.form} items={formItems} />\n            </Modal>\n        );\n    }\n}\n\nWithdrawForm.propTypes = {\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nWithdrawForm.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nexport default WithdrawForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { Modal } from 'antd';\nimport { drizzleConnect } from 'drizzle-react';\n\nimport Form from '../form';\nimport { commissionRateField, rateLockEndTimeField } from '../../utils/form';\nimport { RATE_BASE } from '../../utils/constant';\n\nclass CommissionForm extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.state = {};\n        this.form = React.createRef();\n        this.contracts = context.drizzle.contracts;\n    }\n\n    handleIncreaseCommission = () => {\n        const { onClose, network, candidate } = this.props;\n\n        this.form.current.validateFields((err, values) => {\n            if (err) {\n                console.log(err);\n                return;\n            }\n\n            let { commissionRate, rateLockEndTime } = values;\n            commissionRate = commissionRate * RATE_BASE;\n            rateLockEndTime =\n                _.toNumber(rateLockEndTime) + network.block.number;\n\n            if (commissionRate > candidate.value.commissionRate) {\n                this.contracts.DPoS.methods.announceIncreaseCommissionRate.cacheSend(\n                    commissionRate,\n                    rateLockEndTime\n                );\n            } else {\n                this.contracts.DPoS.methods.nonIncreaseCommissionRate.cacheSend(\n                    commissionRate,\n                    rateLockEndTime\n                );\n            }\n            onClose();\n        });\n    };\n\n    render() {\n        const { visible, onClose } = this.props;\n\n        const formItems = [commissionRateField, rateLockEndTimeField];\n\n        return (\n            <Modal\n                title=\"Increase Commission Rate\"\n                visible={visible}\n                onOk={this.handleIncreaseCommission}\n                onCancel={onClose}\n            >\n                <Form ref={this.form} items={formItems} />\n            </Modal>\n        );\n    }\n}\n\nCommissionForm.propTypes = {\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nCommissionForm.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    const { network } = state;\n\n    return {\n        network\n    };\n}\n\nexport default drizzleConnect(CommissionForm, mapStateToProps);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport web3 from 'web3';\nimport { Table } from 'antd';\n\nimport { formatCelrValue } from '../../utils/unit';\n\nconst columns = [\n    {\n        title: 'Delegator',\n        dataIndex: 'delegator'\n    },\n    {\n        title: 'Delegated Stake',\n        dataIndex: 'delegatedStake',\n        sorter: (a, b) =>\n            web3.utils\n                .toBN(a.delegatedStake)\n                .cmp(web3.utils.toBN(b.delegatedStake)),\n        render: text => formatCelrValue(text)\n    },\n    {\n        title: 'Undelegating Stake',\n        dataIndex: 'undelegatingStake'\n    }\n];\n\nconst nestedColumns = [\n    {\n        title: 'Intent Withdraw Amount',\n        dataIndex: 'intentAmount'\n    },\n    {\n        title: 'Intent Withdraw Block Height',\n        dataIndex: 'intentProposedTime'\n    }\n];\n\nclass DelegatorTable extends React.Component {\n    expandedRowRender = record => {\n        const dataSource = _.zip(\n            record.intentAmounts,\n            record.intentProposedTimes\n        ).map(([intentAmount, intentProposedTime]) => ({\n            intentAmount: formatCelrValue(intentAmount),\n            intentProposedTime\n        }));\n\n        return (\n            <Table\n                columns={nestedColumns}\n                dataSource={dataSource}\n                pagination={false}\n            />\n        );\n    };\n\n    render() {\n        const { delegators } = this.props;\n        const dataSource = delegators\n            .filter(delegator => delegator.value)\n            .sort((delegator0, delegator1) => {\n                return delegator0.args[1] > delegator1.args[1];\n            })\n            .map(delegator => ({\n                ...delegator.value,\n                delegator: delegator.args[1]\n            }));\n\n        return (\n            <Table\n                dataSource={dataSource}\n                columns={columns}\n                pagination={false}\n                expandedRowRender={this.expandedRowRender}\n            />\n        );\n    }\n}\n\nDelegatorTable.propTypes = {\n    delegators: PropTypes.array.isRequired\n};\n\nfunction mapStateToProps(state) {\n    return {};\n}\n\nexport default drizzleConnect(DelegatorTable, mapStateToProps);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { drizzleConnect } from 'drizzle-react';\nimport { Statistic, Row, Col, message, Table } from 'antd';\nimport axios from 'axios';\n\nimport { formatCelrValue } from '../../utils/unit';\n\nconst columns = [\n    {\n        title: 'Delegator',\n        dataIndex: 'delegatorAddr'\n    },\n    {\n        title: 'Delegated Stake',\n        dataIndex: 'delegatedStake',\n        render: text => {\n            return formatCelrValue(text);\n        }\n    }\n];\n\nclass SidechainInfo extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        const {\n            candidateId,\n            network: { setting }\n        } = props;\n        this.state = {};\n\n        axios\n            .get(`${setting.gateway}/validator/candidate/${candidateId}`)\n            .then(res => {\n                this.setState({\n                    ...res.data.result\n                });\n            })\n            .catch(err => {\n                console.error(err);\n                message.warning(\n                    'Please config gateway url in setting to load sidechain info correctly'\n                );\n            });\n    }\n\n    render() {\n        const {\n            commission_rate: commissionRate,\n            staking_pool: stakingPool,\n            delegators,\n            description = {}\n        } = this.state;\n        return (\n            <Row>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Commission Rate\"\n                        value={`${commissionRate * 100} %`}\n                    />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Staking Pool\"\n                        value={formatCelrValue(stakingPool)}\n                    />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Website\"\n                        value={description.website || 'N/A'}\n                    />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Contact\"\n                        value={description.security_contact || 'N/A'}\n                    />\n                </Col>\n\n                <Col span={24}>\n                    <Table\n                        dataSource={delegators}\n                        columns={columns}\n                        pagination={false}\n                    />\n                </Col>\n            </Row>\n        );\n    }\n}\n\nSidechainInfo.propTypes = {};\n\nSidechainInfo.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    const { network } = state;\n\n    return {\n        network\n    };\n}\n\nexport default drizzleConnect(SidechainInfo, mapStateToProps);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { drizzleConnect } from 'drizzle-react';\nimport { Table } from 'antd';\n\nimport { formatCelrValue } from '../../utils/unit';\n\nconst columns = [\n    {\n        title: 'Delegator',\n        dataIndex: 'delegator'\n    },\n    {\n        title: 'Amount',\n        dataIndex: 'amount'\n    }\n];\n\nclass SlashTable extends React.Component {\n    render() {\n        const { slashes } = this.props;\n\n        const dataSource = slashes\n            .sort((slash0, slash1) => {\n                return slash0.validator > slash1.validator;\n            })\n            .map(slash => ({\n                ...slash,\n                amount: formatCelrValue(slash.amount)\n            }));\n\n        console.log(slashes);\n        return (\n            <Table\n                dataSource={dataSource}\n                columns={columns}\n                pagination={false}\n            />\n        );\n    }\n}\n\nSlashTable.propTypes = {\n    slashes: PropTypes.array.isRequired\n};\n\nfunction mapStateToProps(state) {\n    return {};\n}\n\nexport default drizzleConnect(SlashTable, mapStateToProps);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport bech32 from 'bech32';\nimport web3 from 'web3';\nimport {\n    Card,\n    Skeleton,\n    Statistic,\n    Row,\n    Col,\n    Menu,\n    Dropdown,\n    Icon,\n    Tabs\n} from 'antd';\n\nimport DelegateForm from '../components/candidate/delegate-form';\nimport WithdrawForm from '../components/candidate/withdraw-form';\nimport CommissionForm from '../components/candidate/commission-form';\nimport DelegatorTable from '../components/candidate/delegator-table';\nimport SidechainInfo from '../components/candidate/sidechain-info';\nimport SlashTable from '../components/candidate/slash-table';\nimport { formatCelrValue } from '../utils/unit';\nimport { CANDIDATE_STATUS } from '../utils/dpos';\nimport { RATE_BASE } from '../utils/constant';\n\nclass Candidate extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.contracts = context.drizzle.contracts;\n        this.state = {\n            candidate: null,\n            slashes: [],\n            isDelegateModalVisible: false,\n            isWithdrawModalVisible: false,\n            isCommissionModalVisible: false\n        };\n\n        const candidateId = props.match.params.id;\n        this.contracts.SGN.methods.sidechainAddrMap.cacheCall(candidateId);\n        this.contracts.DPoS.events.Delegate(\n            {\n                fromBlock: 0,\n                filter: { candidate: candidateId }\n            },\n            (err, event) => {\n                if (err) {\n                    return;\n                }\n\n                const { delegator, candidate } = event.returnValues;\n                this.contracts.DPoS.methods.getDelegatorInfo.cacheCall(\n                    candidate,\n                    delegator\n                );\n            }\n        );\n\n        this.contracts.DPoS.events.Slash(\n            {\n                fromBlock: 0,\n                filter: { validator: candidateId }\n            },\n            (err, event) => {\n                if (err) {\n                    return;\n                }\n\n                this.setState({\n                    slashes: [...this.state.slashes, event.returnValues]\n                });\n            }\n        );\n    }\n\n    static getDerivedStateFromProps(props) {\n        const { match, DPoS = {} } = props;\n        const candidateId = match.params.id;\n        const candidates = _.values(DPoS.getCandidateInfo);\n        const candidate = _.find(\n            candidates,\n            candidate => candidate.args[0] === candidateId\n        );\n        const delegators = _.values(DPoS.getDelegatorInfo).filter(\n            delegator => delegator.args[0] === candidateId\n        );\n\n        return { candidate, candidateId, delegators };\n    }\n\n    toggleDelegateModal = () => {\n        this.setState(prevState => ({\n            isDelegateModalVisible: !prevState.isDelegateModalVisible\n        }));\n    };\n\n    toggleWithdrawModal = () => {\n        this.setState(prevState => ({\n            isWithdrawModalVisible: !prevState.isWithdrawModalVisible\n        }));\n    };\n\n    toggleCommissionModal = () => {\n        this.setState(prevState => ({\n            isCommissionModalVisible: !prevState.isCommissionModalVisible\n        }));\n    };\n\n    confirmWithdraw = () => {\n        const { candidateId } = this.state;\n\n        this.contracts.DPoS.methods.confirmWithdraw.cacheSend(candidateId);\n    };\n\n    confirmIncreaseCommissionRate = () => {\n        this.contracts.DPoS.methods.confirmIncreaseCommissionRate.cacheSend();\n    };\n\n    claimValidator = () => {\n        this.contracts.DPoS.methods.claimValidator.cacheSend();\n    };\n\n    renderAction = () => {\n        const { accounts } = this.props;\n        const { candidate } = this.state;\n        const { status } = candidate.value;\n        const isOwner = accounts[0] === candidate.args[0];\n        const menu = (\n            <Menu>\n                <Menu.Item onClick={this.toggleDelegateModal}>\n                    Delegate\n                </Menu.Item>\n                {status === '0' ? (\n                    <Menu.Item onClick={this.toggleWithdrawModal}>\n                        Withdraw\n                    </Menu.Item>\n                ) : (\n                    [\n                        <Menu.Item onClick={this.toggleWithdrawModal}>\n                            Initialize Withdraw\n                        </Menu.Item>,\n                        <Menu.Item onClick={this.confirmWithdraw}>\n                            Confirm Withdraw\n                        </Menu.Item>\n                    ]\n                )}\n                {isOwner && (\n                    <Menu.Item onClick={this.toggleCommissionModal}>\n                        Announce Increase Commission Rate\n                    </Menu.Item>\n                )}\n                {isOwner && (\n                    <Menu.Item onClick={this.confirmIncreaseCommissionRate}>\n                        Confirm Increase Commission Rate\n                    </Menu.Item>\n                )}\n                {isOwner && (\n                    <Menu.Item onClick={this.claimValidator}>\n                        Claim Validator\n                    </Menu.Item>\n                )}\n            </Menu>\n        );\n\n        return (\n            <Dropdown overlay={menu}>\n                <a className=\"ant-dropdown-link\">\n                    Actions <Icon type=\"down\" />\n                </a>\n            </Dropdown>\n        );\n    };\n\n    renderCandidateDetail = () => {\n        const { SGN } = this.props;\n        const { candidate, delegators, slashes } = this.state;\n        const candidateId = candidate.args[0];\n        const {\n            minSelfStake,\n            stakingPool,\n            status,\n            commissionRate,\n            rateLockEndTime\n        } = candidate.value;\n        const sidechainHexAddr = _.chain(SGN.sidechainAddrMap)\n            .find(data => data.args[0] === candidateId)\n            .get('value', '')\n            .value();\n        const sidechainAddr =\n            sidechainHexAddr &&\n            bech32.encode(\n                'sgn',\n                bech32.toWords(web3.utils.hexToBytes(sidechainHexAddr))\n            );\n\n        return (\n            <Row style={{ marginTop: '10px' }}>\n                <Col span={12}>\n                    <Statistic title=\"Address\" value={candidateId} />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Status\"\n                        value={CANDIDATE_STATUS[status]}\n                    />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Min Self Stake\"\n                        value={formatCelrValue(minSelfStake)}\n                    />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Staking Pool\"\n                        value={formatCelrValue(stakingPool)}\n                    />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Commission Rate\"\n                        value={`${commissionRate / RATE_BASE} %`}\n                    />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Rate Lock End Time\"\n                        value={`${rateLockEndTime} block height`}\n                    />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Sidechain Address\"\n                        value={sidechainAddr}\n                    />\n                </Col>\n                <Col span={24}>\n                    <Tabs>\n                        <Tabs.TabPane tab=\"Delegators\" key=\"delegators\">\n                            <DelegatorTable delegators={delegators} />\n                        </Tabs.TabPane>\n                        <Tabs.TabPane tab=\"Sidechain\" key=\"sidechain\">\n                            <SidechainInfo candidateId={candidateId} />\n                        </Tabs.TabPane>\n                        <Tabs.TabPane tab=\"Slashes\" key=\"slashes\">\n                            <SlashTable slashes={slashes} />\n                        </Tabs.TabPane>\n                    </Tabs>\n                </Col>\n            </Row>\n        );\n    };\n\n    render() {\n        const {\n            candidate,\n            candidateId,\n            isDelegateModalVisible,\n            isWithdrawModalVisible,\n            isCommissionModalVisible\n        } = this.state;\n\n        if (!candidate) {\n            return <Skeleton />;\n        }\n\n        return (\n            <Card title=\"Candidate\" extra={this.renderAction()}>\n                {this.renderCandidateDetail()}\n                <DelegateForm\n                    candidateId={candidateId}\n                    visible={isDelegateModalVisible}\n                    onClose={this.toggleDelegateModal}\n                />\n                <WithdrawForm\n                    candidate={candidate}\n                    visible={isWithdrawModalVisible}\n                    onClose={this.toggleWithdrawModal}\n                />\n                <CommissionForm\n                    candidate={candidate}\n                    visible={isCommissionModalVisible}\n                    onClose={this.toggleCommissionModal}\n                />\n            </Card>\n        );\n    }\n}\n\nCandidate.propTypes = {\n    dispatch: PropTypes.func.isRequired\n};\n\nCandidate.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    const { accounts, contracts, DPoS, SGN } = state;\n    return {\n        accounts,\n        DPoS: { ...DPoS, ...contracts.DPoS },\n        SGN: { ...SGN, ...contracts.SGN }\n    };\n}\n\nexport default drizzleConnect(Candidate, mapStateToProps);\n"],"sourceRoot":""}