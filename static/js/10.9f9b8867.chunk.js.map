{"version":3,"sources":["routes/reward.js"],"names":["Reward","props","context","intendWithdraw","gateway","post","ethAddr","currentUser","then","message","success","redeemReward","get","res","contracts","SGN","methods","cacheSend","data","result","renderActions","type","onClick","accounts","setting","network","drizzle","state","redeemedServiceReward","cacheCall","DPoS","redeemedMiningReward","axios","create","baseURL","timeout","setState","catch","err","console","error","warning","this","miningReward","serviceReward","_","isEmpty","title","actions","style","marginTop","span","value","formatCelrValue","values","React","Component","contextTypes","PropTypes","object","drizzleConnect"],"mappings":"iVASMA,E,kDACF,WAAYC,EAAOC,GAAU,IAAD,uBACxB,cAAMD,IAqCVE,eAAiB,WACb,EAAKC,QACAC,KAAK,4BAA6B,CAC/BC,QAAS,EAAKC,cAEjBC,MAAK,WACFC,IAAQC,QACJ,6DA7CY,EAkD5BC,aAAe,WACX,EAAKP,QACAQ,IADL,mCACqC,EAAKL,cACrCC,MAAK,SAAAK,GACF,EAAKC,UAAUC,IAAIC,QAAQL,aAAaM,UACpC,KAAOJ,EAAIK,KAAKC,YAvDJ,EA4D5BC,cAAgB,WACZ,MAAO,CACH,kBAAC,IAAD,CAAQC,KAAK,UAAUC,QAAS,EAAKnB,gBAArC,qBAGA,kBAAC,IAAD,CAAQkB,KAAK,UAAUC,QAAS,EAAKX,cAArC,mBAjEoB,IAIpBY,EAEAtB,EAFAsB,SACWC,EACXvB,EADAwB,QAAWD,QALS,OAOxB,EAAKjB,YAAcgB,EAAS,GAC5B,EAAKT,UAAYZ,EAAQwB,QAAQZ,UACjC,EAAKa,MAAQ,GAEb,EAAKb,UAAUC,IAAIC,QAAQY,sBAAsBC,UAC7C,EAAKtB,aAET,EAAKO,UAAUgB,KAAKd,QAAQe,qBAAqBF,UAC7C,EAAKtB,aAGT,EAAKH,QAAU4B,IAAMC,OAAO,CACxBC,QAASV,EAAQpB,QACjB+B,QAAS,MAGb,EAAK/B,QACAQ,IADL,4BAC8B,EAAKL,cAC9BC,MAAK,SAAAK,GACF,EAAKuB,SAAL,eACOvB,EAAIK,KAAKC,YAGnBkB,OAAM,SAAAC,GACHC,QAAQC,MAAMF,GACd7B,IAAQgC,QACJ,wEAjCY,E,qDAuElB,IAAD,EACiBC,KAAKzC,MAAnB6B,EADH,EACGA,KAAMf,EADT,EACSA,IADT,EAEmC2B,KAAKf,MAArCgB,EAFH,EAEGA,aAAcC,EAFjB,EAEiBA,cACdb,EAAyBD,EAAzBC,qBACAH,EAA0Bb,EAA1Ba,sBAER,OACIiB,IAAEC,QAAQlB,IACViB,IAAEC,QAAQf,GAEH,kBAAC,IAAD,MAIP,kBAAC,IAAD,CAAMgB,MAAM,SAASC,QAASN,KAAKtB,iBAC/B,kBAAC,IAAD,CAAK6B,MAAO,CAAEC,UAAW,SACrB,kBAAC,IAAD,CAAKC,KAAM,IACP,kBAAC,IAAD,CACIJ,MAAM,2BACNK,MAAOC,YAAgBV,MAG/B,kBAAC,IAAD,CAAKQ,KAAM,IACP,kBAAC,IAAD,CACIJ,MAAM,4BACNK,MAAOC,YAAgBT,MAG/B,kBAAC,IAAD,CAAKO,KAAM,IACP,kBAAC,IAAD,CACIJ,MAAM,yBACNK,MAAOC,YACHR,IAAES,OAAOvB,GAAsB,GAAGqB,UAI9C,kBAAC,IAAD,CAAKD,KAAM,IACP,kBAAC,IAAD,CACIJ,MAAM,0BACNK,MAAOC,YACHR,IAAES,OAAO1B,GAAuB,GAAGwB,gB,GAhH9CG,IAAMC,WA8H3BxD,EAAOyD,aAAe,CAClB/B,QAASgC,IAAUC,QAcRC,mCAAe5D,GAX9B,SAAyB2B,GAAQ,IACrBF,EAA4CE,EAA5CF,QAASF,EAAmCI,EAAnCJ,SAAUT,EAAyBa,EAAzBb,UAAWgB,EAAcH,EAAdG,KAAMf,EAAQY,EAARZ,IAE5C,MAAO,CACHU,UACAF,WACAO,KAAK,2BAAMA,GAAShB,EAAUgB,MAC9Bf,IAAI,2BAAMA,GAAQD,EAAUC","file":"static/js/10.9f9b8867.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport { Skeleton, Card, Statistic, Row, Col, Button, message } from 'antd';\nimport axios from 'axios';\n\nimport { formatCelrValue } from '../utils/unit';\n\nclass Reward extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        const {\n            accounts,\n            network: { setting }\n        } = props;\n        this.currentUser = accounts[0];\n        this.contracts = context.drizzle.contracts;\n        this.state = {};\n\n        this.contracts.SGN.methods.redeemedServiceReward.cacheCall(\n            this.currentUser\n        );\n        this.contracts.DPoS.methods.redeemedMiningReward.cacheCall(\n            this.currentUser\n        );\n\n        this.gateway = axios.create({\n            baseURL: setting.gateway,\n            timeout: 1000\n        });\n\n        this.gateway\n            .get(`/validator/reward/${this.currentUser}`)\n            .then(res => {\n                this.setState({\n                    ...res.data.result\n                });\n            })\n            .catch(err => {\n                console.error(err);\n                message.warning(\n                    'Please config gateway url in setting to load sgn reward correctly'\n                );\n            });\n    }\n\n    intendWithdraw = () => {\n        this.gateway\n            .post('/validator/withdrawReward', {\n                ethAddr: this.currentUser\n            })\n            .then(() => {\n                message.success(\n                    'Success! Please wait a few seconds to trigger redeem.'\n                );\n            });\n    };\n\n    redeemReward = () => {\n        this.gateway\n            .get(`/validator/rewardRequest/${this.currentUser}`)\n            .then(res => {\n                this.contracts.SGN.methods.redeemReward.cacheSend(\n                    '0x' + res.data.result\n                );\n            });\n    };\n\n    renderActions = () => {\n        return [\n            <Button type=\"primary\" onClick={this.intendWithdraw}>\n                Initialize Redeem\n            </Button>,\n            <Button type=\"primary\" onClick={this.redeemReward}>\n                Redeem Reward\n            </Button>\n        ];\n    };\n\n    render() {\n        const { DPoS, SGN } = this.props;\n        const { miningReward, serviceReward } = this.state;\n        const { redeemedMiningReward } = DPoS;\n        const { redeemedServiceReward } = SGN;\n\n        if (\n            _.isEmpty(redeemedServiceReward) ||\n            _.isEmpty(redeemedMiningReward)\n        ) {\n            return <Skeleton />;\n        }\n\n        return (\n            <Card title=\"Reward\" actions={this.renderActions()}>\n                <Row style={{ marginTop: '10px' }}>\n                    <Col span={12}>\n                        <Statistic\n                            title=\"Cumulative Mining Reward\"\n                            value={formatCelrValue(miningReward)}\n                        />\n                    </Col>\n                    <Col span={12}>\n                        <Statistic\n                            title=\"Cumulative Service Reward\"\n                            value={formatCelrValue(serviceReward)}\n                        />\n                    </Col>\n                    <Col span={12}>\n                        <Statistic\n                            title=\"Redeemed Mining Reward\"\n                            value={formatCelrValue(\n                                _.values(redeemedMiningReward)[0].value\n                            )}\n                        />\n                    </Col>\n                    <Col span={12}>\n                        <Statistic\n                            title=\"Redeemed Service Reward\"\n                            value={formatCelrValue(\n                                _.values(redeemedServiceReward)[0].value\n                            )}\n                        />\n                    </Col>\n                </Row>\n            </Card>\n        );\n    }\n}\n\nReward.propTypes = {\n    dispatch: PropTypes.func.isRequired\n};\n\nReward.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    const { network, accounts, contracts, DPoS, SGN } = state;\n\n    return {\n        network,\n        accounts,\n        DPoS: { ...DPoS, ...contracts.DPoS },\n        SGN: { ...SGN, ...contracts.SGN }\n    };\n}\n\nexport default drizzleConnect(Reward, mapStateToProps);\n"],"sourceRoot":""}