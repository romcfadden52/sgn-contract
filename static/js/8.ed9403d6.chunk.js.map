{"version":3,"sources":["utils/dpos.js","components/filter.js","components/govern/proposal-form.js","routes/govern.js"],"names":["CANDIDATE_STATUS","PARAM_NAMES","PROPOSAL_STATUS","Voting","Closed","VOTE_TYPE","Yes","No","Abstain","FormItem","Form","Item","Filter","onChange","value","props","name","this","allowClear","label","mode","selectProps","_","omit","className","capitalize","React","PureComponent","defaultProps","disabled","placeholder","ProposalForm","context","handleCreateParamProposal","onClose","form","current","validateFields","err","values","console","log","record","contracts","DPoS","methods","createParamProposal","cacheSend","state","createRef","drizzle","visible","formItems","field","fieldOptions","options","map","param","index","rules","message","required","minValueRule","title","onOk","onCancel","ref","items","Component","contextTypes","PropTypes","object","Govern","toggleProposalModal","setState","prevState","isProposalModalVisible","voteParam","proposalId","voteType","confirmParamProposal","updateFilter","change","filter","renderFilters","status","proposalStatus","style","width","renderProposal","propsal","args","voteDeadline","newValue","menu","type","onClick","actions","overlay","icon","size","span","renderProposals","proposals","paramProposals","proposal","grid","gutter","column","dataSource","renderItem","extra","drizzleConnect"],"mappings":"4IAAA,wIAAO,IAAMA,EAAmB,CAAC,WAAY,SAAU,aAE1CC,EAAc,CACzB,kBACA,oBACA,eACA,kBACA,kBACA,iBACA,wBAGWC,EAAkB,CAAEC,OAAQ,IAAKC,OAAQ,KAEzCC,EAAY,CACvBC,IAAK,EACLC,GAAI,EACJC,QAAS,I,8OCXLC,EAAWC,IAAKC,KAEDC,E,4MACnBC,SAAW,SAACC,GAAW,IAAD,EACO,EAAKC,MAAxBC,EADY,EACZA,KAAMH,EADM,EACNA,SAGZA,EADEG,EACO,eAAGA,EAAOF,GAIZA,I,uDAGD,IAAD,EAC0CG,KAAKF,MAA9CG,EADD,EACCA,WAAYC,EADb,EACaA,MAAOH,EADpB,EACoBA,KAAMI,EAD1B,EAC0BA,KAAMN,EADhC,EACgCA,MACjCO,EAAW,eACZC,IAAEC,KAAKN,KAAKF,MAAO,CAAC,QAAS,OAAQ,cAW1C,MARa,aAATK,GAAwBN,IAC1BO,EAAYP,MAAQ,IAGjBM,GAASF,IACZG,EAAYH,YAAa,GAIzB,kBAACT,EAAD,CAAUe,UAAU,kBAAkBL,MAAOA,GAASG,IAAEG,WAAWT,IACjE,kBAAC,IAAD,iBAAYK,EAAZ,CAAyBR,SAAUI,KAAKJ,iB,GA5BZa,IAAMC,eAkC1Cf,EAAOgB,aAAe,CACpBC,UAAU,EACVV,MAAO,GACPW,YAAa,O,wCCrCTC,E,kDACJ,WAAYhB,EAAOiB,GAAU,IAAD,8BAC1B,cAAMjB,IAORkB,0BAA4B,WAAO,IACzBC,EAAY,EAAKnB,MAAjBmB,QAER,EAAKC,KAAKC,QAAQC,gBAAe,SAACC,EAAKC,GACrC,GAAID,EACFE,QAAQC,IAAIH,OADd,CADgD,IAM1CxB,EAAkByB,EAAlBzB,MAAO4B,EAAWH,EAAXG,OAEb,EAAKC,UAAUC,KAAKC,QAAQC,oBAAoBC,UAAUL,EAAQ5B,GAClEoB,SAjBF,EAAKc,MAAQ,GACb,EAAKb,KAAOT,IAAMuB,YAClB,EAAKN,UAAYX,EAAQkB,QAAQP,UALP,E,qDAwBlB,IAAD,EACsB1B,KAAKF,MAA1BoC,EADD,EACCA,QAASjB,EADV,EACUA,QAGXkB,EAAY,CAChB,CACEpC,KAAM,SACNqC,MAAO,SACPC,aAAc,CACZC,QAPgBtD,IAAYuD,KAAI,SAACC,EAAOC,GAAR,MAAkB,CAACA,EAAOD,MAQ1D3B,YAAa,wBAEf6B,MAAO,CACL,CACEC,QAAS,0BACTC,UAAU,KAIhB,CACE7C,KAAM,QACNG,MAAO,QACPkC,MAAO,SACPC,aAAc,CACZxB,YAAa,iBAEf6B,MAAO,CACLG,YAAa,GACb,CACEF,QAAS,4BACTC,UAAU,MAMlB,OACE,kBAAC,IAAD,CACEE,MAAM,wBACNZ,QAASA,EACTa,KAAM/C,KAAKgB,0BACXgC,SAAU/B,GAEV,kBAAC,IAAD,CAAMgC,IAAKjD,KAAKkB,KAAMgC,MAAOf,S,GApEV1B,IAAM0C,WA+EjCrC,EAAasC,aAAe,CAC1BnB,QAASoB,IAAUC,QAGNxC,QCjFTyC,E,kDACJ,WAAYzD,EAAOiB,GAAU,IAAD,8BAC1B,cAAMjB,IAMR0D,oBAAsB,WACpB,EAAKC,UAAS,SAACC,GAAD,MAAgB,CAC5BC,wBAAyBD,EAAUC,4BATX,EAa5BC,UAAY,SAACC,EAAYC,GACvB,EAAKpC,UAAUC,KAAKC,QAAQgC,UAAU9B,UAAU+B,EAAYC,IAdlC,EAiB5BC,qBAAuB,SAACF,GACtB,EAAKnC,UAAUC,KAAKC,QAAQmC,qBAAqBjC,UAAU+B,IAlBjC,EAqB5BG,aAAe,SAACC,GACd,EAAKR,UAAS,SAACC,GAAD,MAAgB,CAC5BQ,OAAO,2BAAMR,EAAUQ,QAAWD,QAvBV,EA2B5BE,cAAgB,WAAO,IACbC,EAAW,EAAKrC,MAAMmC,OAAtBE,OACFC,EAAiBhE,IAAEkC,IAAItD,KAAiB,SAACY,EAAOuE,GAAR,MAAmB,CAC/DvE,EACAuE,MAGF,OACE,kBAAC,EAAD,CACErE,KAAK,SACLuC,QAAS+B,EACTC,MAAO,CAAEC,MAAO,KAChB3E,SAAU,EAAKoE,aACfnE,MAAOuE,EACPnE,YAAU,KAzCY,EA8C5BuE,eAAiB,SAACC,GAChB,IAAMZ,EAAaY,EAAQC,KAAK,GADJ,EAEeD,EAAQ5E,MAA3C8E,EAFoB,EAEpBA,aAAclD,EAFM,EAENA,OAAQmD,EAFF,EAEEA,SACxBC,EACJ,kBAAC,IAAD,KACGxE,IAAEkC,IAAInD,KAAW,SAACS,EAAOiF,GAAR,OAChB,kBAAC,IAAKpF,KAAN,CAAWqF,QAAS,kBAAM,EAAKnB,UAAUC,EAAYhE,KAClDiF,OAMT,OACE,kBAAC,IAAKpF,KAAN,KACE,kBAAC,IAAD,CACEsF,QAAS,CACP,kBAAC,IAAD,CAAUC,QAASJ,GACjB,kBAAC,IAAD,CAAQC,KAAK,OAAOhC,MAAM,OAAOoC,KAAK,QAAQC,KAAK,SAAnD,SAIF,kBAAC,IAAD,CACEL,KAAK,OACLhC,MAAM,OACNoC,KAAK,eACLC,KAAK,QACLJ,QAAS,kBAAM,EAAKhB,qBAAqBF,KAL3C,sBAWF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKuB,KAAM,IACT,kBAAC,IAAD,CAAWtC,MAAM,cAAcjD,MAAOgE,KAExC,kBAAC,IAAD,CAAKuB,KAAM,IACT,kBAAC,IAAD,CAAWtC,MAAM,gBAAgBjD,MAAO8E,KAE1C,kBAAC,IAAD,CAAKS,KAAM,IACT,kBAAC,IAAD,CAAWtC,MAAM,SAASjD,MAAOb,IAAYyC,MAE/C,kBAAC,IAAD,CAAK2D,KAAM,IACT,kBAAC,IAAD,CAAWtC,MAAM,YAAYjD,MAAO+E,SA1FpB,EAkG5BS,gBAAkB,WAAO,IACf1D,EAAS,EAAK7B,MAAd6B,KACAuC,EAAW,EAAKnC,MAAhBmC,OACJoB,EAAYjF,IAAEiB,OAAOK,EAAK4D,gBAQ9B,OANAD,EAAYjF,IAAE6D,OAAOoB,GAAW,SAACE,GAAc,IACrCpB,EAAWoB,EAAS3F,MAApBuE,OAER,OADA7C,QAAQC,IAAIgE,EAAS3F,OACdqE,EAAOE,SAAWA,KAIzB,kBAAC,IAAD,CACEqB,KAAM,CAAEC,OAAQ,GAAIC,OAAQ,GAC5BC,WAAYN,EACZO,WAAY,EAAKrB,kBA9GrB,EAAKzC,MAAQ,CAAE4B,wBAAwB,EAAOO,OAAQ,CAAEE,OAAQ,MAChE,EAAK1C,UAAYX,EAAQkB,QAAQP,UAJP,E,qDAsHlB,IACAiC,EAA2B3D,KAAK+B,MAAhC4B,uBAER,OACE,kBAAC,IAAD,CACEb,MAAM,SACNgD,MACE,kBAAC,IAAD,CAAQhB,KAAK,UAAUC,QAAS/E,KAAKwD,qBAArC,oBAKDxD,KAAKmE,gBACLnE,KAAKqF,kBACN,kBAAC,EAAD,CACEnD,QAASyB,EACT1C,QAASjB,KAAKwD,2B,GAvIH/C,IAAM0C,WAkJ3BI,EAAOH,aAAe,CACpBnB,QAASoB,IAAUC,QAWNyC,mCAAexC,GAR9B,SAAyBxB,GAAQ,IACvBL,EAAoBK,EAApBL,UAAWC,EAASI,EAATJ,KAEnB,MAAO,CACLA,KAAK,2BAAMA,GAASD,EAAUC","file":"static/js/8.ed9403d6.chunk.js","sourcesContent":["export const CANDIDATE_STATUS = ['Unbonded', 'Bonded', 'Unbonding'];\n\nexport const PARAM_NAMES = [\n  'ProposalDeposit',\n  'GovernVoteTimeout',\n  'BlameTimeout',\n  'MinValidatorNum',\n  'MaxValidatorNum',\n  'MinStakeInPool',\n  'IncreaseRateWaitTime',\n];\n\nexport const PROPOSAL_STATUS = { Voting: '1', Closed: '2' };\n\nexport const VOTE_TYPE = {\n  Yes: 1,\n  No: 2,\n  Abstain: 3,\n};\n","import React from 'react';\nimport _ from 'lodash';\nimport { Form } from 'antd';\n\nimport Select from './select';\n\nconst FormItem = Form.Item;\n\nexport default class Filter extends React.PureComponent {\n  onChange = (value) => {\n    const { name, onChange } = this.props;\n\n    if (name) {\n      onChange({ [name]: value });\n      return;\n    }\n\n    onChange(value);\n  };\n\n  render() {\n    const { allowClear, label, name, mode, value } = this.props;\n    const selectProps = {\n      ..._.omit(this.props, ['label', 'name', 'onChange']),\n    };\n\n    if (mode === 'multiple' && !value) {\n      selectProps.value = [];\n    }\n\n    if (!mode && !allowClear) {\n      selectProps.allowClear = false;\n    }\n\n    return (\n      <FormItem className=\"dropdown-filter\" label={label || _.capitalize(name)}>\n        <Select {...selectProps} onChange={this.onChange} />\n      </FormItem>\n    );\n  }\n}\n\nFilter.defaultProps = {\n  disabled: false,\n  label: '',\n  placeholder: 'all',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Modal } from 'antd';\n\nimport Form from '../form';\nimport { PARAM_NAMES } from '../../utils/dpos';\nimport { minValueRule } from '../../utils/form';\n\nclass ProposalForm extends React.Component {\n  constructor(props, context) {\n    super(props);\n\n    this.state = {};\n    this.form = React.createRef();\n    this.contracts = context.drizzle.contracts;\n  }\n\n  handleCreateParamProposal = () => {\n    const { onClose } = this.props;\n\n    this.form.current.validateFields((err, values) => {\n      if (err) {\n        console.log(err);\n        return;\n      }\n\n      let { value, record } = values;\n\n      this.contracts.DPoS.methods.createParamProposal.cacheSend(record, value);\n      onClose();\n    });\n  };\n\n  render() {\n    const { visible, onClose } = this.props;\n    const recordOptions = PARAM_NAMES.map((param, index) => [index, param]);\n\n    const formItems = [\n      {\n        name: 'record',\n        field: 'select',\n        fieldOptions: {\n          options: recordOptions,\n          placeholder: 'The parameter record',\n        },\n        rules: [\n          {\n            message: 'Please select a record!',\n            required: true,\n          },\n        ],\n      },\n      {\n        name: 'value',\n        label: 'Value',\n        field: 'number',\n        fieldOptions: {\n          placeholder: 'The new value',\n        },\n        rules: [\n          minValueRule(0),\n          {\n            message: 'Please enter a new value!',\n            required: true,\n          },\n        ],\n      },\n    ];\n\n    return (\n      <Modal\n        title=\"Create Param Proposal\"\n        visible={visible}\n        onOk={this.handleCreateParamProposal}\n        onCancel={onClose}\n      >\n        <Form ref={this.form} items={formItems} />\n      </Modal>\n    );\n  }\n}\n\nProposalForm.propTypes = {\n  visible: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nProposalForm.contextTypes = {\n  drizzle: PropTypes.object,\n};\n\nexport default ProposalForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport { Button, Card, List, Statistic, Row, Col, Dropdown, Menu } from 'antd';\n\nimport Filter from '../components/filter';\nimport ProposalForm from '../components/govern/proposal-form';\nimport { PARAM_NAMES, PROPOSAL_STATUS, VOTE_TYPE } from '../utils/dpos';\n\nclass Govern extends React.Component {\n  constructor(props, context) {\n    super(props);\n\n    this.state = { isProposalModalVisible: false, filter: { status: '1' } };\n    this.contracts = context.drizzle.contracts;\n  }\n\n  toggleProposalModal = () => {\n    this.setState((prevState) => ({\n      isProposalModalVisible: !prevState.isProposalModalVisible,\n    }));\n  };\n\n  voteParam = (proposalId, voteType) => {\n    this.contracts.DPoS.methods.voteParam.cacheSend(proposalId, voteType);\n  };\n\n  confirmParamProposal = (proposalId) => {\n    this.contracts.DPoS.methods.confirmParamProposal.cacheSend(proposalId);\n  };\n\n  updateFilter = (change) => {\n    this.setState((prevState) => ({\n      filter: { ...prevState.filter, ...change },\n    }));\n  };\n\n  renderFilters = () => {\n    const { status } = this.state.filter;\n    const proposalStatus = _.map(PROPOSAL_STATUS, (value, status) => [\n      value,\n      status,\n    ]);\n\n    return (\n      <Filter\n        name=\"status\"\n        options={proposalStatus}\n        style={{ width: 100 }}\n        onChange={this.updateFilter}\n        value={status}\n        allowClear\n      />\n    );\n  };\n\n  renderProposal = (propsal) => {\n    const proposalId = propsal.args[0];\n    const { voteDeadline, record, newValue } = propsal.value;\n    const menu = (\n      <Menu>\n        {_.map(VOTE_TYPE, (value, type) => (\n          <Menu.Item onClick={() => this.voteParam(proposalId, value)}>\n            {type}\n          </Menu.Item>\n        ))}\n      </Menu>\n    );\n\n    return (\n      <List.Item>\n        <Card\n          actions={[\n            <Dropdown overlay={menu}>\n              <Button type=\"link\" title=\"Vote\" icon=\"audit\" size=\"small\">\n                Vote\n              </Button>\n            </Dropdown>,\n            <Button\n              type=\"link\"\n              title=\"Vote\"\n              icon=\"check-square\"\n              size=\"small\"\n              onClick={() => this.confirmParamProposal(proposalId)}\n            >\n              Confirm Proposal\n            </Button>,\n          ]}\n        >\n          <Row>\n            <Col span={12}>\n              <Statistic title=\"Proposal ID\" value={proposalId} />\n            </Col>\n            <Col span={12}>\n              <Statistic title=\"Vote Deadline\" value={voteDeadline} />\n            </Col>\n            <Col span={12}>\n              <Statistic title=\"Record\" value={PARAM_NAMES[record]} />\n            </Col>\n            <Col span={12}>\n              <Statistic title=\"New Value\" value={newValue} />\n            </Col>\n          </Row>\n        </Card>\n      </List.Item>\n    );\n  };\n\n  renderProposals = () => {\n    const { DPoS } = this.props;\n    const { filter } = this.state;\n    let proposals = _.values(DPoS.paramProposals);\n\n    proposals = _.filter(proposals, (proposal) => {\n      const { status } = proposal.value;\n      console.log(proposal.value);\n      return filter.status === status;\n    });\n\n    return (\n      <List\n        grid={{ gutter: 16, column: 2 }}\n        dataSource={proposals}\n        renderItem={this.renderProposal}\n      />\n    );\n  };\n\n  render() {\n    const { isProposalModalVisible } = this.state;\n\n    return (\n      <Card\n        title=\"Govern\"\n        extra={\n          <Button type=\"primary\" onClick={this.toggleProposalModal}>\n            Create Proposal\n          </Button>\n        }\n      >\n        {this.renderFilters()}\n        {this.renderProposals()}\n        <ProposalForm\n          visible={isProposalModalVisible}\n          onClose={this.toggleProposalModal}\n        />\n      </Card>\n    );\n  }\n}\n\nGovern.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n};\n\nGovern.contextTypes = {\n  drizzle: PropTypes.object,\n};\n\nfunction mapStateToProps(state) {\n  const { contracts, DPoS } = state;\n\n  return {\n    DPoS: { ...DPoS, ...contracts.DPoS },\n  };\n}\n\nexport default drizzleConnect(Govern, mapStateToProps);\n"],"sourceRoot":""}