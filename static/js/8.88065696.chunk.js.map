{"version":3,"sources":["utils/dpos.js","components/filter.js","components/govern/proposal-form.js","routes/govern.js"],"names":["CANDIDATE_STATUS","PARAM_NAMES","PROPOSAL_STATUS","Voting","Closed","VOTE_TYPE","Yes","No","Abstain","FormItem","Form","Item","Filter","onChange","value","props","name","this","allowClear","label","mode","selectProps","_","omit","className","capitalize","React","PureComponent","defaultProps","disabled","placeholder","ProposalForm","context","handleCreateParamProposal","onClose","form","current","validateFields","err","values","console","log","record","contracts","DPoS","methods","createParamProposal","cacheSend","state","createRef","drizzle","visible","formItems","field","fieldOptions","options","map","param","index","rules","message","required","minValueRule","title","onOk","onCancel","ref","items","Component","contextTypes","PropTypes","object","Govern","toggleProposalModal","setState","prevState","isProposalModalVisible","voteParam","proposalId","voteType","confirmParamProposal","updateFilter","change","filter","renderFilters","status","proposalStatus","style","width","renderProposal","propsal","args","voteDeadline","newValue","menu","type","onClick","actions","overlay","icon","size","span","renderProposals","proposals","paramProposals","proposal","grid","gutter","column","dataSource","renderItem","extra","drizzleConnect"],"mappings":"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","file":"static/js/8.88065696.chunk.js","sourcesContent":["export const CANDIDATE_STATUS = ['Unbonded', 'Bonded', 'Unbonding'];\n\nexport const PARAM_NAMES = [\n    'ProposalDeposit',\n    'GovernVoteTimeout',\n    'BlameTimeout',\n    'MinValidatorNum',\n    'MaxValidatorNum',\n    'MinStakeInPool',\n    'IncreaseRateWaitTime'\n];\n\nexport const PROPOSAL_STATUS = { Voting: '1', Closed: '2' };\n\nexport const VOTE_TYPE = {\n    Yes: 1,\n    No: 2,\n    Abstain: 3\n};\n","import React from 'react';\nimport _ from 'lodash';\nimport { Form } from 'antd';\n\nimport Select from './select';\n\nconst FormItem = Form.Item;\n\nexport default class Filter extends React.PureComponent {\n    onChange = value => {\n        const { name, onChange } = this.props;\n\n        if (name) {\n            onChange({ [name]: value });\n            return;\n        }\n\n        onChange(value);\n    };\n\n    render() {\n        const { allowClear, label, name, mode, value } = this.props;\n        const selectProps = {\n            ..._.omit(this.props, ['label', 'name', 'onChange'])\n        };\n\n        if (mode === 'multiple' && !value) {\n            selectProps.value = [];\n        }\n\n        if (!mode && !allowClear) {\n            selectProps.allowClear = false;\n        }\n\n        return (\n            <FormItem\n                className=\"dropdown-filter\"\n                label={label || _.capitalize(name)}\n            >\n                <Select {...selectProps} onChange={this.onChange} />\n            </FormItem>\n        );\n    }\n}\n\nFilter.defaultProps = {\n    disabled: false,\n    label: '',\n    placeholder: 'all'\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Modal } from 'antd';\n\nimport Form from '../form';\nimport { PARAM_NAMES } from '../../utils/dpos';\nimport { minValueRule } from '../../utils/form';\n\nclass ProposalForm extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.state = {};\n        this.form = React.createRef();\n        this.contracts = context.drizzle.contracts;\n    }\n\n    handleCreateParamProposal = () => {\n        const { onClose } = this.props;\n\n        this.form.current.validateFields((err, values) => {\n            if (err) {\n                console.log(err);\n                return;\n            }\n\n            let { value, record } = values;\n\n            this.contracts.DPoS.methods.createParamProposal.cacheSend(\n                record,\n                value\n            );\n            onClose();\n        });\n    };\n\n    render() {\n        const { visible, onClose } = this.props;\n        const recordOptions = PARAM_NAMES.map((param, index) => [index, param]);\n\n        const formItems = [\n            {\n                name: 'record',\n                field: 'select',\n                fieldOptions: {\n                    options: recordOptions,\n                    placeholder: 'The parameter record'\n                },\n                rules: [\n                    {\n                        message: 'Please select a record!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'value',\n                label: 'Value',\n                field: 'number',\n                fieldOptions: {\n                    placeholder: 'The new value'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a new value!',\n                        required: true\n                    }\n                ]\n            }\n        ];\n\n        return (\n            <Modal\n                title=\"Create Param Proposal\"\n                visible={visible}\n                onOk={this.handleCreateParamProposal}\n                onCancel={onClose}\n            >\n                <Form ref={this.form} items={formItems} />\n            </Modal>\n        );\n    }\n}\n\nProposalForm.propTypes = {\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nProposalForm.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nexport default ProposalForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport { Button, Card, List, Statistic, Row, Col, Dropdown, Menu } from 'antd';\n\nimport Filter from '../components/filter';\nimport ProposalForm from '../components/govern/proposal-form';\nimport { PARAM_NAMES, PROPOSAL_STATUS, VOTE_TYPE } from '../utils/dpos';\n\nclass Govern extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.state = { isProposalModalVisible: false, filter: { status: '1' } };\n        this.contracts = context.drizzle.contracts;\n    }\n\n    toggleProposalModal = () => {\n        this.setState(prevState => ({\n            isProposalModalVisible: !prevState.isProposalModalVisible\n        }));\n    };\n\n    voteParam = (proposalId, voteType) => {\n        this.contracts.DPoS.methods.voteParam.cacheSend(proposalId, voteType);\n    };\n\n    confirmParamProposal = proposalId => {\n        this.contracts.DPoS.methods.confirmParamProposal.cacheSend(proposalId);\n    };\n\n    updateFilter = change => {\n        this.setState(prevState => ({\n            filter: { ...prevState.filter, ...change }\n        }));\n    };\n\n    renderFilters = () => {\n        const { status } = this.state.filter;\n        const proposalStatus = _.map(PROPOSAL_STATUS, (value, status) => [\n            value,\n            status\n        ]);\n\n        return (\n            <Filter\n                name=\"status\"\n                options={proposalStatus}\n                style={{ width: 100 }}\n                onChange={this.updateFilter}\n                value={status}\n                allowClear\n            />\n        );\n    };\n\n    renderProposal = propsal => {\n        const proposalId = propsal.args[0];\n        const { voteDeadline, record, newValue } = propsal.value;\n        const menu = (\n            <Menu>\n                {_.map(VOTE_TYPE, (value, type) => (\n                    <Menu.Item\n                        onClick={() => this.voteParam(proposalId, value)}\n                    >\n                        {type}\n                    </Menu.Item>\n                ))}\n            </Menu>\n        );\n\n        return (\n            <List.Item>\n                <Card\n                    actions={[\n                        <Dropdown overlay={menu}>\n                            <Button\n                                type=\"link\"\n                                title=\"Vote\"\n                                icon=\"audit\"\n                                size=\"small\"\n                            >\n                                Vote\n                            </Button>\n                        </Dropdown>,\n                        <Button\n                            type=\"link\"\n                            title=\"Vote\"\n                            icon=\"check-square\"\n                            size=\"small\"\n                            onClick={() =>\n                                this.confirmParamProposal(proposalId)\n                            }\n                        >\n                            Confirm Proposal\n                        </Button>\n                    ]}\n                >\n                    <Row>\n                        <Col span={12}>\n                            <Statistic title=\"Proposal ID\" value={proposalId} />\n                        </Col>\n                        <Col span={12}>\n                            <Statistic\n                                title=\"Vote Deadline\"\n                                value={voteDeadline}\n                            />\n                        </Col>\n                        <Col span={12}>\n                            <Statistic\n                                title=\"Record\"\n                                value={PARAM_NAMES[record]}\n                            />\n                        </Col>\n                        <Col span={12}>\n                            <Statistic title=\"New Value\" value={newValue} />\n                        </Col>\n                    </Row>\n                </Card>\n            </List.Item>\n        );\n    };\n\n    renderProposals = () => {\n        const { DPoS } = this.props;\n        const { filter } = this.state;\n        let proposals = _.values(DPoS.paramProposals);\n\n        proposals = _.filter(proposals, proposal => {\n            const { status } = proposal.value;\n            console.log(proposal.value);\n            return filter.status === status;\n        });\n\n        return (\n            <List\n                grid={{ gutter: 16, column: 2 }}\n                dataSource={proposals}\n                renderItem={this.renderProposal}\n            />\n        );\n    };\n\n    render() {\n        const { isProposalModalVisible } = this.state;\n\n        return (\n            <Card\n                title=\"Govern\"\n                extra={\n                    <Button type=\"primary\" onClick={this.toggleProposalModal}>\n                        Create Proposal\n                    </Button>\n                }\n            >\n                {this.renderFilters()}\n                {this.renderProposals()}\n                <ProposalForm\n                    visible={isProposalModalVisible}\n                    onClose={this.toggleProposalModal}\n                />\n            </Card>\n        );\n    }\n}\n\nGovern.propTypes = {\n    dispatch: PropTypes.func.isRequired\n};\n\nGovern.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    const { contracts, DPoS } = state;\n\n    return {\n        DPoS: { ...DPoS, ...contracts.DPoS }\n    };\n}\n\nexport default drizzleConnect(Govern, mapStateToProps);\n"],"sourceRoot":""}