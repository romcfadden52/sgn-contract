{"version":3,"sources":["utils/network.js","components/form.js","utils/contracts.js","utils/constant.js","utils/unit.js","utils/form.js","components/select.js","components/approve-celr.js","components/setting.js","components/account-info.js","utils/subscribe.js","App.js","router.js","models/celr-token.js","models/dpos.js","models/sgn.js","models/network.js","index.js"],"names":["networkConfigs","localNetworkConfig","getNetworkConfig","networkID","networkConfig","checkNetworkCompatbility","window","web3","currentProvider","networkVersion","Modal","error","title","content","FormItem","Form","Item","buttonLayout","wrapperCol","sm","span","offset","xs","FIELD_MAP","date","DatePicker","input","Input","number","InputNumber","text","TextArea","select","Select","CustomizeForm","handleSubmit","e","props","form","onSubmit","preventDefault","validateFields","err","values","renderFormItems","formItemLayout","items","getFieldDecorator","_","map","item","field","fieldOptions","initialValue","label","name","rules","Field","decoratorOptions","getValueFromEvent","args","fileList","target","type","checked","value","key","capitalize","this","submitText","noop","htmlType","React","Component","defaultProps","labelCol","create","onValuesChange","changedValues","contractOptions","block","fallback","url","contracts","DPoS","SGN","CELRToken","polls","accounts","blocks","RATE_PRECISION","RATE_BASE","formatCelrValue","unit","toNumber","utils","fromWei","split","formatCurrencyValue","celrFieldOptions","formatter","parser","replace","minValueRule","minValue","validator","rule","callback","commissionRateField","placeholder","step","precision","message","required","rateLockEndTimeField","prefix","suffix","Option","allowClear","disabled","optionFilterProp","state","undefined","onChange","setState","getValue","defaultValue","renderOptions","options","omit","isNil","showSearch","ApproveCelrForm","context","onClose","current","methods","approve","address","toWei","toString","send","createRef","drizzle","visible","formItems","onOk","onCancel","ref","contextTypes","PropTypes","object","SettingForm","dispatch","console","log","payload","setting","network","gateway","placement","width","drizzleConnect","AccountInfo","celrValue","useState","showSetting","setShowSetting","className","extra","icon","onClick","getCelrAllowance","account","allowance","cacheCall","Sider","Layout","Content","Footer","App","toggleModal","prevState","isModalVisible","events","InitializeCandidate","fromBlock","event","candidate","returnValues","getCandidateInfo","CreateParamProposal","paramProposals","proposalId","Approval","filter","owner","spender","subscribeEvent","blockNumber","selectedAddress","setInterval","location","reload","eth","getBlock","then","subscribeChainInfo","children","pathname","celerAllowance","theme","mode","selectedKeys","slice","to","style","textAlign","withRouter","ConnectedRouter","routerRedux","LoadingWrapper","LoadingContainer","redirectToHome","RouterConfig","history","app","Dynamic","component","Candidate","Govern","Reward","store","_store","exact","path","render","namespace","effects","reducers","save","action","JSON","parse","localStorage","getItem","protocol","hostname","saveSetting","put","setItem","stringify","rootSaga","all","drizzleSagas","saga","fork","dva","initialState","generateContractsInitialState","extraReducers","drizzleReducers","onError","resp","msg","srv","use","createLoading","model","CELRModel","DPoSModel","SGNModel","NetworkModel","router","require","default","start","runSaga"],"mappings":"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","file":"static/js/main.63119e75.chunk.js","sourcesContent":["import { Modal } from 'antd';\n\nconst MAINNET = '1';\nconst ROPSTEN = '3';\nconst RINKEBY = '4';\n\nconst networkConfigs = {};\n\nconst localNetworkConfig = {};\n\nexport const getNetworkConfig = networkID => {\n    let networkConfig = localNetworkConfig;\n    if (networkConfigs[networkID]) {\n        networkConfig = networkConfigs[networkID];\n    }\n\n    return networkConfig;\n};\n\nexport const checkNetworkCompatbility = () => {\n    if (process.env.NODE_ENV === 'development') {\n        return;\n    }\n\n    const networkVersion = window.web3.currentProvider.networkVersion;\n    if (networkVersion !== ROPSTEN) {\n        Modal.error({\n            title: 'Current network is not supported',\n            content: 'Please switch to ropsten'\n        });\n    }\n};\n","import React from 'react';\nimport _ from 'lodash';\nimport { Button, DatePicker, Form, Input, InputNumber } from 'antd';\n\nimport Select from './select';\n\nconst FormItem = Form.Item;\n\nconst defaultFormItemLayout = {\n    labelCol: {\n        sm: { span: 8 },\n        xs: { span: 24 }\n    },\n\n    wrapperCol: {\n        sm: { span: 16 },\n        xs: { span: 24 }\n    }\n};\n\nconst buttonLayout = {\n    wrapperCol: {\n        sm: { span: 3, offset: 21 },\n        xs: { span: 24 }\n    }\n};\n\nconst FIELD_MAP = {\n    date: DatePicker,\n    input: Input,\n    number: InputNumber,\n    text: Input.TextArea,\n    select: Select\n};\n\nclass CustomizeForm extends React.Component {\n    handleSubmit = e => {\n        const { form, onSubmit } = this.props;\n        e.preventDefault();\n        form.validateFields((err, values) => {\n            if (!err) {\n                onSubmit(values);\n            }\n        });\n    };\n\n    renderFormItems = () => {\n        const { form, formItemLayout, items } = this.props;\n        const { getFieldDecorator } = form;\n\n        return _.map(items, item => {\n            const {\n                field = 'input',\n                fieldOptions,\n                initialValue,\n                label,\n                name,\n                rules\n            } = item;\n            const Field = FIELD_MAP[field];\n            const decoratorOptions = {\n                initialValue,\n                rules,\n                getValueFromEvent(...args) {\n                    if (field === 'file') {\n                        return args[0].fileList;\n                    }\n\n                    const [e] = args;\n                    if (!e || !e.target) {\n                        return e;\n                    }\n\n                    const { target } = e;\n                    return target.type === 'checkbox'\n                        ? target.checked\n                        : target.value;\n                }\n            };\n\n            return (\n                <FormItem\n                    key={name}\n                    {...formItemLayout}\n                    label={!label ? _.capitalize(name) : label}\n                >\n                    {getFieldDecorator(\n                        name,\n                        decoratorOptions\n                    )(<Field {...fieldOptions} />)}\n                </FormItem>\n            );\n        });\n    };\n\n    render() {\n        const { onSubmit, submitText } = this.props;\n        return (\n            <Form onSubmit={this.handleSubmit}>\n                {this.renderFormItems()}\n                {onSubmit !== _.noop && (\n                    <FormItem {...buttonLayout}>\n                        <Button htmlType=\"submit\" type=\"primary\">\n                            {submitText}\n                        </Button>\n                    </FormItem>\n                )}\n            </Form>\n        );\n    }\n}\n\nCustomizeForm.defaultProps = {\n    formItemLayout: defaultFormItemLayout,\n    onSubmit: _.noop,\n    submitText: 'Save'\n};\n\nexport default Form.create({\n    onValuesChange(props, changedValues) {\n        if (props.onValuesChange) {\n            props.onValuesChange(changedValues);\n        }\n    }\n})(CustomizeForm);\n","import DPoS from './../contracts/DPoS.json';\nimport SGN from './../contracts/SGN.json';\nimport CELRToken from './../contracts/CELRToken.json';\n\n// let drizzle know what contracts we want\nconst contractOptions = {\n    web3: {\n        block: false,\n        fallback: {\n            type: 'ws',\n            url: 'ws://localhost:8545'\n        }\n    },\n    contracts: [DPoS, SGN, CELRToken],\n    polls: {\n        accounts: 1000,\n        blocks: 1000\n    }\n};\n\nexport default contractOptions;\n","export const EMPTY_ADDRESS = '0x0000000000000000000000000000000000000000';\nexport const RATE_PRECISION = 2;\nexport const RATE_BASE = 10 ** RATE_PRECISION;\n","import _ from 'lodash';\nimport web3 from 'web3';\n\nimport './network';\n\nexport const CELR = 'CELR';\n\nexport const getUnitByAddress = (supportedTokens, address) => {\n    const token = _.find(\n        supportedTokens,\n        supportedToken => supportedToken.address === address\n    );\n\n    if (!token) {\n        return '';\n    }\n    return token.symbol;\n};\n\nexport const formatCurrencyValue = (value, unit) => {\n    if (!value) {\n        return;\n    }\n\n    const num = _.toNumber(value);\n\n    if (num < 100000) {\n        return `${value} wei`;\n    }\n\n    return `${web3.utils.fromWei(value).split('.')[0]} ${unit}`;\n};\n\nexport const formatCelrValue = value => {\n    return formatCurrencyValue(value, CELR);\n};\n","import { RATE_PRECISION, RATE_BASE } from './constant';\n\nexport const currencyFieldOptions = unit => ({\n    formatter: value => (value ? `${value}${unit}` : ''),\n    parser: value => value.replace(/[A-Z]/g, '')\n});\n\nexport const celrFieldOptions = currencyFieldOptions('CELR');\n\nexport const dayFieldOptions = {\n    formatter: value => (value ? `${value}day` : ''),\n    parser: value => value.replace(/[a-z]/g, '')\n};\n\nexport const blockFieldOptions = {\n    formatter: value => (value ? `${value}block` : ''),\n    parser: value => value.replace(/[a-z]/g, '')\n};\n\nexport const rateFieldOptions = {\n    formatter: value => (value ? `${value}%` : ''),\n    parser: value => value.replace(/[%]/g, '')\n};\n\nexport const minValueRule = minValue => ({\n    validator: (rule, value, callback) => {\n        if (value < minValue) {\n            const msg = `value is smaller than ${minValue}`;\n            callback(msg);\n        }\n\n        callback();\n    }\n});\n\nexport const commissionRateField = {\n    name: 'commissionRate',\n    label: 'Commission Rate',\n    field: 'number',\n    fieldOptions: {\n        ...rateFieldOptions,\n        placeholder: 'The commission rate',\n        step: 1 / RATE_BASE,\n        precision: RATE_PRECISION\n    },\n    rules: [\n        minValueRule(0),\n        {\n            message: 'Please enter a commission rate!',\n            required: true\n        }\n    ]\n};\n\nexport const rateLockEndTimeField = {\n    name: 'rateLockEndTime',\n    label: 'Rate Lock End Time',\n    fieldOptions: {\n        placeholder: 'The rate lock end time',\n        prefix: '+',\n        suffix: 'blocks'\n    },\n    rules: [\n        {\n            message: 'Please enter a rate lock end time!',\n            required: true\n        }\n    ]\n};\n","import React from 'react';\nimport { Select } from 'antd';\nimport _ from 'lodash';\n\nconst Option = Select.Option;\n\nexport default class extends React.Component {\n    defaultProps = {\n        allowClear: true,\n        disabled: false,\n        optionFilterProp: 'children',\n        placeholder: ''\n    };\n\n    state = { value: undefined };\n\n    onChange = (value: ValueType) => this.setState({ value });\n\n    getValue = () => {\n        const { defaultValue } = this.props;\n        const { value } = this.state;\n        return value || defaultValue;\n    };\n\n    renderOptions = () => {\n        const { options } = this.props;\n        return _.map(options, ([value, text]) => (\n            <Option key={value} value={value}>\n                {text}\n            </Option>\n        ));\n    };\n\n    render() {\n        const { defaultValue } = this.props;\n        const props = {\n            ..._.omit(this.props, ['options', 'defaultValue'])\n        };\n\n        if (!props.onChange) {\n            props.onChange = this.onChange;\n        }\n        if (!_.isNil(defaultValue)) {\n            props.defaultValue = defaultValue;\n        }\n\n        return (\n            <Select {...props} showSearch={true}>\n                {this.renderOptions()}\n            </Select>\n        );\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport web3 from 'web3';\nimport { Modal } from 'antd';\n\nimport Form from './form';\nimport { celrFieldOptions } from '../utils/form';\n\nclass ApproveCelrForm extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.form = React.createRef();\n        this.contracts = context.drizzle.contracts;\n    }\n\n    onSubmit = () => {\n        const { onClose } = this.props;\n\n        this.form.current.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n\n            const { value } = values;\n\n            this.contracts.CELRToken.methods\n                .approve(\n                    this.contracts.DPoS.address,\n                    web3.utils.toWei(value.toString(), 'ether')\n                )\n                .send();\n\n            onClose();\n        });\n    };\n\n    render() {\n        const { visible, onClose } = this.props;\n        const formItems = [\n            {\n                name: 'value',\n                field: 'number',\n                fieldOptions: {\n                    ...celrFieldOptions,\n                    placeholder: 'The amount of CELR allowance DPoS has'\n                },\n                rules: [\n                    {\n                        message: 'Please enter a value!',\n                        required: true\n                    }\n                ]\n            }\n        ];\n\n        return (\n            <Modal\n                title=\"Approve CELR to DPoS\"\n                visible={visible}\n                onOk={this.onSubmit}\n                onCancel={onClose}\n            >\n                <Form ref={this.form} items={formItems} />\n            </Modal>\n        );\n    }\n}\n\nApproveCelrForm.propTypes = {\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nApproveCelrForm.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nexport default ApproveCelrForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Drawer } from 'antd';\nimport { drizzleConnect } from 'drizzle-react';\n\nimport Form from './form';\n\nclass SettingForm extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.state = {};\n        this.form = React.createRef();\n        this.contracts = context.drizzle.contracts;\n    }\n\n    handleSubmit = () => {\n        const { onClose, dispatch } = this.props;\n\n        this.form.current.validateFields((err, values) => {\n            if (err) {\n                console.log(err);\n                return;\n            }\n\n            dispatch({\n                type: 'network/saveSetting',\n                payload: { setting: values }\n            });\n\n            onClose();\n        });\n    };\n\n    render() {\n        const {\n            visible,\n            onClose,\n            network: { setting = {} }\n        } = this.props;\n\n        const formItems = [\n            {\n                name: 'gateway',\n                initialValue: setting.gateway,\n                fieldOptions: {\n                    placeholder: 'The gateway URL'\n                },\n                rules: [\n                    {\n                        message: 'Please enter gateway URL!',\n                        required: true\n                    }\n                ]\n            }\n        ];\n\n        return (\n            <Drawer\n                title=\"Setting\"\n                placement=\"right\"\n                width=\"500\"\n                onClose={onClose}\n                visible={visible}\n            >\n                <Form\n                    ref={this.form}\n                    items={formItems}\n                    onSubmit={this.handleSubmit}\n                />\n            </Drawer>\n        );\n    }\n}\n\nSettingForm.propTypes = {\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nSettingForm.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    const { network } = state;\n\n    return {\n        network\n    };\n}\n\nexport default drizzleConnect(SettingForm, mapStateToProps);\n","import React, { useState } from 'react';\nimport { Card, Statistic, Button } from 'antd';\n\nimport Setting from './setting';\nimport { formatCelrValue } from '../utils/unit';\n\nfunction AccountInfo(props) {\n    const { celrValue } = props;\n    const [showSetting, setShowSetting] = useState(false);\n\n    return (\n        <>\n            <Card\n                className=\"account-info\"\n                title=\"Account info\"\n                extra={\n                    <Button\n                        icon=\"setting\"\n                        title=\"Setting\"\n                        onClick={() => setShowSetting(true)}\n                    />\n                }\n            >\n                <Statistic\n                    title=\"CELR allowance for DPoS\"\n                    value={formatCelrValue(celrValue)}\n                />\n            </Card>\n            <Setting\n                visible={showSetting}\n                onClose={() => setShowSetting(false)}\n            />\n        </>\n    );\n}\n\nexport default AccountInfo;\n","const POLL_INTERVAL = 1000;\n\nexport const subscribeEvent = (account, contracts, dispatch) => {\n    const { DPoS, CELRToken } = contracts;\n\n    DPoS.events.InitializeCandidate(\n        {\n            fromBlock: 0\n        },\n        (err, event) => {\n            if (err) {\n                console.log(err);\n                return;\n            }\n\n            const { candidate } = event.returnValues;\n            DPoS.methods.getCandidateInfo.cacheCall(candidate);\n        }\n    );\n\n    DPoS.events.CreateParamProposal(\n        {\n            fromBlock: 0\n        },\n        (err, event) => {\n            if (err) {\n                console.log(err);\n                return;\n            }\n\n            DPoS.methods.paramProposals.cacheCall(\n                event.returnValues.proposalId\n            );\n        }\n    );\n\n    CELRToken.events.Approval(\n        {\n            filter: {\n                owner: account,\n                spender: DPoS.address\n            }\n        },\n        (err, event) => {\n            if (err) {\n                return;\n            }\n\n            getCelrAllowance(account, contracts);\n        }\n    );\n\n    getCelrAllowance(account, contracts);\n};\n\nexport const subscribeChainInfo = (web3, dispatch) => {\n    const account = web3.currentProvider.selectedAddress;\n    let blockNumber;\n\n    setInterval(() => {\n        if (account !== web3.currentProvider.selectedAddress) {\n            window.location.reload();\n        }\n\n        return web3.eth.getBlock('latest').then(block => {\n            if (block && blockNumber !== block.number) {\n                dispatch({\n                    type: 'network/save',\n                    payload: { block }\n                });\n                blockNumber = block.number;\n            }\n        });\n    }, POLL_INTERVAL);\n};\n\nconst getCelrAllowance = (account, contracts) => {\n    const { CELRToken, DPoS } = contracts;\n    CELRToken.methods.allowance.cacheCall(account, DPoS.address);\n};\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport { withRouter, Link } from 'dva/router';\nimport { Layout, Menu, Button } from 'antd';\n\nimport ApproveCELRForm from './components/approve-celr';\nimport AccountInfo from './components/account-info';\nimport { subscribeEvent, subscribeChainInfo } from './utils/subscribe';\nimport { getNetworkConfig } from './utils/network';\n\nimport './App.css';\n\nconst { Sider, Content, Footer } = Layout;\n\nclass App extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.state = { isModalVisible: false };\n        this.contracts = context.drizzle.contracts;\n        this.web3 = context.drizzle.web3;\n    }\n\n    componentWillMount() {\n        const { accounts, dispatch } = this.props;\n        subscribeEvent(accounts[0], this.contracts, dispatch);\n        subscribeChainInfo(this.web3, dispatch);\n\n        dispatch({\n            type: 'network/save',\n            payload: getNetworkConfig(this.web3.currentProvider.networkVersion)\n        });\n    }\n\n    toggleModal = () => {\n        this.setState(prevState => ({\n            isModalVisible: !prevState.isModalVisible\n        }));\n    };\n\n    render() {\n        const { isModalVisible } = this.state;\n        const { children, location, CELRToken } = this.props;\n        const { pathname } = location;\n        const celerAllowance = _.values(CELRToken.allowance)[0] || {};\n\n        return (\n            <Layout>\n                <Sider>\n                    <AccountInfo celrValue={celerAllowance.value} />\n                    <Menu\n                        theme=\"dark\"\n                        mode=\"inline\"\n                        selectedKeys={[pathname.slice(1)]}\n                    >\n                        <Menu.Item key=\"dpos\">\n                            <Link to=\"/dpos\">Validators</Link>\n                        </Menu.Item>\n                        {/* <Menu.Item key=\"govern\">\n                            <Link to=\"/govern\">Govern</Link>\n                        </Menu.Item> */}\n                        <Menu.Item key=\"reward\">\n                            <Link to=\"/reward\">Reward</Link>\n                        </Menu.Item>\n                        <Menu.Item className=\"approve-celr\">\n                            <Button\n                                type=\"primary\"\n                                block\n                                onClick={this.toggleModal}\n                            >\n                                Approve CELR\n                            </Button>\n                        </Menu.Item>\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Content>\n                        {children}\n                        <ApproveCELRForm\n                            visible={isModalVisible}\n                            onClose={this.toggleModal}\n                        />\n                    </Content>\n                    <Footer style={{ textAlign: 'center' }}>\n                        Sgn ©2019 Created by Celer Network\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}\n\nApp.propTypes = {\n    children: PropTypes.element.isRequired,\n    location: PropTypes.object.isRequired\n};\n\nApp.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    const { accounts, contracts } = state;\n\n    return {\n        accounts,\n        CELRToken: contracts.CELRToken\n    };\n}\n\nexport default withRouter(drizzleConnect(App, mapStateToProps));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter, routerRedux, Switch, Route, Redirect } from 'dva/router';\nimport Dynamic from 'dva/dynamic';\nimport { DrizzleProvider } from 'drizzle-react';\nimport { LoadingContainer } from 'drizzle-react-components';\n\nimport App from './App';\nimport contractOptions from './utils/contracts';\n\nconst { ConnectedRouter } = routerRedux;\nconst LoadingWrapper = withRouter(LoadingContainer);\n\nconst redirectToHome = () => <Redirect to=\"/dpos\" />;\n\nfunction RouterConfig({ history, app }) {\n    const DPoS = Dynamic({\n        app,\n        component: () => import('./routes/dpos')\n    });\n    const Candidate = Dynamic({\n        app,\n        component: () => import('./routes/candidate')\n    });\n    const Govern = Dynamic({\n        app,\n        component: () => import('./routes/govern')\n    });\n    const Reward = Dynamic({\n        app,\n        component: () => import('./routes/reward')\n    });\n\n    return (\n        <DrizzleProvider options={contractOptions} store={app._store}>\n            <ConnectedRouter history={history}>\n                <LoadingWrapper>\n                    <App>\n                        <Switch>\n                            <Route exact path=\"/dpos\" component={DPoS} />\n                            <Route exact path=\"/govern\" component={Govern} />\n                            <Route exact path=\"/reward\" component={Reward} />\n                            <Route\n                                exact\n                                path=\"/candidate/:id\"\n                                component={Candidate}\n                            />\n                            <Route exact path=\"/\" render={redirectToHome} />\n                        </Switch>\n                    </App>\n                </LoadingWrapper>\n            </ConnectedRouter>\n        </DrizzleProvider>\n    );\n}\n\nRouterConfig.propTypes = {\n    history: PropTypes.object.isRequired\n};\n\nexport default RouterConfig;\n","export default {\n    namespace: 'CELRToken',\n\n    state: {},\n\n    effects: {},\n\n    reducers: {\n        save(state, action) {\n            return { ...state, ...action.payload };\n        }\n    }\n};\n","export default {\n    namespace: 'DPoS',\n\n    state: {},\n\n    effects: {},\n\n    reducers: {\n        save(state, action) {\n            return { ...state, ...action.payload };\n        }\n    }\n};\n","export default {\n    namespace: 'SGN',\n\n    state: {},\n\n    effects: {},\n\n    reducers: {\n        save(state, action) {\n            return { ...state, ...action.payload };\n        }\n    }\n};\n","const SETTING_KEY = 'setting';\n\nexport default {\n    namespace: 'network',\n\n    state: {\n        setting: JSON.parse(localStorage.getItem(SETTING_KEY)) || {\n            gateway: `${window.location.protocol}//${window.location.hostname}:1317`\n        }\n    },\n\n    effects: {\n        *saveSetting({ payload }, { put }) {\n            const { setting } = payload;\n            localStorage.setItem(SETTING_KEY, JSON.stringify(setting));\n\n            yield put({ payload, type: 'save' });\n        }\n    },\n\n    reducers: {\n        save(state, action) {\n            return { ...state, ...action.payload };\n        }\n    }\n};\n","import dva from 'dva';\nimport createLoading from 'dva-loading';\nimport { all, fork } from 'redux-saga/effects';\nimport {\n    generateContractsInitialState,\n    drizzleReducers,\n    drizzleSagas\n} from 'drizzle';\nimport { message } from 'antd';\n\nimport contractOptions from './utils/contracts';\nimport { checkNetworkCompatbility } from './utils/network';\nimport CELRModel from './models/celr-token';\nimport DPoSModel from './models/dpos';\nimport SGNModel from './models/sgn';\nimport NetworkModel from './models/network';\n\nfunction* rootSaga() {\n    yield all(drizzleSagas.map(saga => fork(saga)));\n}\n\ncheckNetworkCompatbility();\n\n// 1. Initialize\nconst app = dva({\n    initialState: {\n        ...generateContractsInitialState(contractOptions)\n    },\n    extraReducers: {\n        ...drizzleReducers\n    },\n    onError(err) {\n        if (err.resp) {\n            message.error(err.resp.msg);\n        } else if (err.srv) {\n            message.error(err.srv.msg);\n        } else {\n            message.error(err);\n        }\n    }\n});\n\n// 2. Plugins\napp.use(\n    createLoading({\n        namespace: 'loading'\n        // effects: enable effects level loading state\n    })\n);\n\n// 3. Model\n// Moved to router.js\napp.model(CELRModel);\napp.model(DPoSModel);\napp.model(SGNModel);\napp.model(NetworkModel);\n\n// 4. Router\napp.router(require('./router.js').default);\n\n// 5. Start\napp.start('#root');\napp._store.runSaga(rootSaga);\n"],"sourceRoot":""}